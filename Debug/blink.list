
blink.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000013e0  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080015b8  080015b8  000025b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080015c8  080015c8  0000300c  2**0
                  CONTENTS
  4 .ARM          00000000  080015c8  080015c8  0000300c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080015c8  080015c8  0000300c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080015c8  080015c8  000025c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080015cc  080015cc  000025cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080015d0  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  2000000c  080015dc  0000300c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  080015dc  0000302c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000300c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004447  00000000  00000000  0000303c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000010ae  00000000  00000000  00007483  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000005a8  00000000  00000000  00008538  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000041e  00000000  00000000  00008ae0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b2d1  00000000  00000000  00008efe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00005cd5  00000000  00000000  000241cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000abfd4  00000000  00000000  00029ea4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d5e78  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000014d8  00000000  00000000  000d5ebc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000048  00000000  00000000  000d7394  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080015a0 	.word	0x080015a0

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	080015a0 	.word	0x080015a0

08000218 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800021c:	f000 f90b 	bl	8000436 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000220:	f000 f804 	bl	800022c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000224:	f000 f842 	bl	80002ac <MX_GPIO_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000228:	bf00      	nop
 800022a:	e7fd      	b.n	8000228 <main+0x10>

0800022c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800022c:	b580      	push	{r7, lr}
 800022e:	b094      	sub	sp, #80	@ 0x50
 8000230:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000232:	f107 0318 	add.w	r3, r7, #24
 8000236:	2238      	movs	r2, #56	@ 0x38
 8000238:	2100      	movs	r1, #0
 800023a:	4618      	mov	r0, r3
 800023c:	f001 f984 	bl	8001548 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000240:	1d3b      	adds	r3, r7, #4
 8000242:	2200      	movs	r2, #0
 8000244:	601a      	str	r2, [r3, #0]
 8000246:	605a      	str	r2, [r3, #4]
 8000248:	609a      	str	r2, [r3, #8]
 800024a:	60da      	str	r2, [r3, #12]
 800024c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800024e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000252:	f000 fbdf 	bl	8000a14 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000256:	2302      	movs	r3, #2
 8000258:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800025a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800025e:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000260:	2340      	movs	r3, #64	@ 0x40
 8000262:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000264:	2300      	movs	r3, #0
 8000266:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000268:	f107 0318 	add.w	r3, r7, #24
 800026c:	4618      	mov	r0, r3
 800026e:	f000 fc75 	bl	8000b5c <HAL_RCC_OscConfig>
 8000272:	4603      	mov	r3, r0
 8000274:	2b00      	cmp	r3, #0
 8000276:	d001      	beq.n	800027c <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000278:	f000 f848 	bl	800030c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800027c:	230f      	movs	r3, #15
 800027e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000280:	2301      	movs	r3, #1
 8000282:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000284:	2300      	movs	r3, #0
 8000286:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000288:	2300      	movs	r3, #0
 800028a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800028c:	2300      	movs	r3, #0
 800028e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000290:	1d3b      	adds	r3, r7, #4
 8000292:	2100      	movs	r1, #0
 8000294:	4618      	mov	r0, r3
 8000296:	f000 ff73 	bl	8001180 <HAL_RCC_ClockConfig>
 800029a:	4603      	mov	r3, r0
 800029c:	2b00      	cmp	r3, #0
 800029e:	d001      	beq.n	80002a4 <SystemClock_Config+0x78>
  {
    Error_Handler();
 80002a0:	f000 f834 	bl	800030c <Error_Handler>
  }
}
 80002a4:	bf00      	nop
 80002a6:	3750      	adds	r7, #80	@ 0x50
 80002a8:	46bd      	mov	sp, r7
 80002aa:	bd80      	pop	{r7, pc}

080002ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	b086      	sub	sp, #24
 80002b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002b2:	1d3b      	adds	r3, r7, #4
 80002b4:	2200      	movs	r2, #0
 80002b6:	601a      	str	r2, [r3, #0]
 80002b8:	605a      	str	r2, [r3, #4]
 80002ba:	609a      	str	r2, [r3, #8]
 80002bc:	60da      	str	r2, [r3, #12]
 80002be:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002c0:	4b10      	ldr	r3, [pc, #64]	@ (8000304 <MX_GPIO_Init+0x58>)
 80002c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80002c4:	4a0f      	ldr	r2, [pc, #60]	@ (8000304 <MX_GPIO_Init+0x58>)
 80002c6:	f043 0304 	orr.w	r3, r3, #4
 80002ca:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80002cc:	4b0d      	ldr	r3, [pc, #52]	@ (8000304 <MX_GPIO_Init+0x58>)
 80002ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80002d0:	f003 0304 	and.w	r3, r3, #4
 80002d4:	603b      	str	r3, [r7, #0]
 80002d6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);
 80002d8:	2200      	movs	r2, #0
 80002da:	2120      	movs	r1, #32
 80002dc:	480a      	ldr	r0, [pc, #40]	@ (8000308 <MX_GPIO_Init+0x5c>)
 80002de:	f000 fb81 	bl	80009e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80002e2:	2320      	movs	r3, #32
 80002e4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002e6:	2301      	movs	r3, #1
 80002e8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002ea:	2300      	movs	r3, #0
 80002ec:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002ee:	2300      	movs	r3, #0
 80002f0:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80002f2:	1d3b      	adds	r3, r7, #4
 80002f4:	4619      	mov	r1, r3
 80002f6:	4804      	ldr	r0, [pc, #16]	@ (8000308 <MX_GPIO_Init+0x5c>)
 80002f8:	f000 f9f2 	bl	80006e0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80002fc:	bf00      	nop
 80002fe:	3718      	adds	r7, #24
 8000300:	46bd      	mov	sp, r7
 8000302:	bd80      	pop	{r7, pc}
 8000304:	40021000 	.word	0x40021000
 8000308:	48000800 	.word	0x48000800

0800030c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800030c:	b480      	push	{r7}
 800030e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000310:	b672      	cpsid	i
}
 8000312:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000314:	bf00      	nop
 8000316:	e7fd      	b.n	8000314 <Error_Handler+0x8>

08000318 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000318:	b480      	push	{r7}
 800031a:	b083      	sub	sp, #12
 800031c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800031e:	4b0f      	ldr	r3, [pc, #60]	@ (800035c <HAL_MspInit+0x44>)
 8000320:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000322:	4a0e      	ldr	r2, [pc, #56]	@ (800035c <HAL_MspInit+0x44>)
 8000324:	f043 0301 	orr.w	r3, r3, #1
 8000328:	6613      	str	r3, [r2, #96]	@ 0x60
 800032a:	4b0c      	ldr	r3, [pc, #48]	@ (800035c <HAL_MspInit+0x44>)
 800032c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800032e:	f003 0301 	and.w	r3, r3, #1
 8000332:	607b      	str	r3, [r7, #4]
 8000334:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000336:	4b09      	ldr	r3, [pc, #36]	@ (800035c <HAL_MspInit+0x44>)
 8000338:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800033a:	4a08      	ldr	r2, [pc, #32]	@ (800035c <HAL_MspInit+0x44>)
 800033c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000340:	6593      	str	r3, [r2, #88]	@ 0x58
 8000342:	4b06      	ldr	r3, [pc, #24]	@ (800035c <HAL_MspInit+0x44>)
 8000344:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000346:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800034a:	603b      	str	r3, [r7, #0]
 800034c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800034e:	bf00      	nop
 8000350:	370c      	adds	r7, #12
 8000352:	46bd      	mov	sp, r7
 8000354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000358:	4770      	bx	lr
 800035a:	bf00      	nop
 800035c:	40021000 	.word	0x40021000

08000360 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000360:	b480      	push	{r7}
 8000362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000364:	bf00      	nop
 8000366:	e7fd      	b.n	8000364 <NMI_Handler+0x4>

08000368 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000368:	b480      	push	{r7}
 800036a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800036c:	bf00      	nop
 800036e:	e7fd      	b.n	800036c <HardFault_Handler+0x4>

08000370 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000370:	b480      	push	{r7}
 8000372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000374:	bf00      	nop
 8000376:	e7fd      	b.n	8000374 <MemManage_Handler+0x4>

08000378 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000378:	b480      	push	{r7}
 800037a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800037c:	bf00      	nop
 800037e:	e7fd      	b.n	800037c <BusFault_Handler+0x4>

08000380 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000380:	b480      	push	{r7}
 8000382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000384:	bf00      	nop
 8000386:	e7fd      	b.n	8000384 <UsageFault_Handler+0x4>

08000388 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000388:	b480      	push	{r7}
 800038a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800038c:	bf00      	nop
 800038e:	46bd      	mov	sp, r7
 8000390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000394:	4770      	bx	lr

08000396 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000396:	b480      	push	{r7}
 8000398:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800039a:	bf00      	nop
 800039c:	46bd      	mov	sp, r7
 800039e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a2:	4770      	bx	lr

080003a4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80003a4:	b480      	push	{r7}
 80003a6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80003a8:	bf00      	nop
 80003aa:	46bd      	mov	sp, r7
 80003ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003b0:	4770      	bx	lr

080003b2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80003b2:	b580      	push	{r7, lr}
 80003b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80003b6:	f000 f891 	bl	80004dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80003ba:	bf00      	nop
 80003bc:	bd80      	pop	{r7, pc}
	...

080003c0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80003c0:	b480      	push	{r7}
 80003c2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80003c4:	4b06      	ldr	r3, [pc, #24]	@ (80003e0 <SystemInit+0x20>)
 80003c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80003ca:	4a05      	ldr	r2, [pc, #20]	@ (80003e0 <SystemInit+0x20>)
 80003cc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80003d0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80003d4:	bf00      	nop
 80003d6:	46bd      	mov	sp, r7
 80003d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003dc:	4770      	bx	lr
 80003de:	bf00      	nop
 80003e0:	e000ed00 	.word	0xe000ed00

080003e4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80003e4:	480d      	ldr	r0, [pc, #52]	@ (800041c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80003e6:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80003e8:	f7ff ffea 	bl	80003c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80003ec:	480c      	ldr	r0, [pc, #48]	@ (8000420 <LoopForever+0x6>)
  ldr r1, =_edata
 80003ee:	490d      	ldr	r1, [pc, #52]	@ (8000424 <LoopForever+0xa>)
  ldr r2, =_sidata
 80003f0:	4a0d      	ldr	r2, [pc, #52]	@ (8000428 <LoopForever+0xe>)
  movs r3, #0
 80003f2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80003f4:	e002      	b.n	80003fc <LoopCopyDataInit>

080003f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003fa:	3304      	adds	r3, #4

080003fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000400:	d3f9      	bcc.n	80003f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000402:	4a0a      	ldr	r2, [pc, #40]	@ (800042c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000404:	4c0a      	ldr	r4, [pc, #40]	@ (8000430 <LoopForever+0x16>)
  movs r3, #0
 8000406:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000408:	e001      	b.n	800040e <LoopFillZerobss>

0800040a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800040a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800040c:	3204      	adds	r2, #4

0800040e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800040e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000410:	d3fb      	bcc.n	800040a <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8000412:	f001 f8a1 	bl	8001558 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000416:	f7ff feff 	bl	8000218 <main>

0800041a <LoopForever>:

LoopForever:
    b LoopForever
 800041a:	e7fe      	b.n	800041a <LoopForever>
  ldr   r0, =_estack
 800041c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000420:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000424:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000428:	080015d0 	.word	0x080015d0
  ldr r2, =_sbss
 800042c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000430:	2000002c 	.word	0x2000002c

08000434 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000434:	e7fe      	b.n	8000434 <ADC1_2_IRQHandler>

08000436 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000436:	b580      	push	{r7, lr}
 8000438:	b082      	sub	sp, #8
 800043a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800043c:	2300      	movs	r3, #0
 800043e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000440:	2003      	movs	r0, #3
 8000442:	f000 f91b 	bl	800067c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000446:	200f      	movs	r0, #15
 8000448:	f000 f80e 	bl	8000468 <HAL_InitTick>
 800044c:	4603      	mov	r3, r0
 800044e:	2b00      	cmp	r3, #0
 8000450:	d002      	beq.n	8000458 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000452:	2301      	movs	r3, #1
 8000454:	71fb      	strb	r3, [r7, #7]
 8000456:	e001      	b.n	800045c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000458:	f7ff ff5e 	bl	8000318 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800045c:	79fb      	ldrb	r3, [r7, #7]

}
 800045e:	4618      	mov	r0, r3
 8000460:	3708      	adds	r7, #8
 8000462:	46bd      	mov	sp, r7
 8000464:	bd80      	pop	{r7, pc}
	...

08000468 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000468:	b580      	push	{r7, lr}
 800046a:	b084      	sub	sp, #16
 800046c:	af00      	add	r7, sp, #0
 800046e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000470:	2300      	movs	r3, #0
 8000472:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000474:	4b16      	ldr	r3, [pc, #88]	@ (80004d0 <HAL_InitTick+0x68>)
 8000476:	681b      	ldr	r3, [r3, #0]
 8000478:	2b00      	cmp	r3, #0
 800047a:	d022      	beq.n	80004c2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800047c:	4b15      	ldr	r3, [pc, #84]	@ (80004d4 <HAL_InitTick+0x6c>)
 800047e:	681a      	ldr	r2, [r3, #0]
 8000480:	4b13      	ldr	r3, [pc, #76]	@ (80004d0 <HAL_InitTick+0x68>)
 8000482:	681b      	ldr	r3, [r3, #0]
 8000484:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000488:	fbb1 f3f3 	udiv	r3, r1, r3
 800048c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000490:	4618      	mov	r0, r3
 8000492:	f000 f918 	bl	80006c6 <HAL_SYSTICK_Config>
 8000496:	4603      	mov	r3, r0
 8000498:	2b00      	cmp	r3, #0
 800049a:	d10f      	bne.n	80004bc <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	2b0f      	cmp	r3, #15
 80004a0:	d809      	bhi.n	80004b6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80004a2:	2200      	movs	r2, #0
 80004a4:	6879      	ldr	r1, [r7, #4]
 80004a6:	f04f 30ff 	mov.w	r0, #4294967295
 80004aa:	f000 f8f2 	bl	8000692 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80004ae:	4a0a      	ldr	r2, [pc, #40]	@ (80004d8 <HAL_InitTick+0x70>)
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	6013      	str	r3, [r2, #0]
 80004b4:	e007      	b.n	80004c6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80004b6:	2301      	movs	r3, #1
 80004b8:	73fb      	strb	r3, [r7, #15]
 80004ba:	e004      	b.n	80004c6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80004bc:	2301      	movs	r3, #1
 80004be:	73fb      	strb	r3, [r7, #15]
 80004c0:	e001      	b.n	80004c6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80004c2:	2301      	movs	r3, #1
 80004c4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80004c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80004c8:	4618      	mov	r0, r3
 80004ca:	3710      	adds	r7, #16
 80004cc:	46bd      	mov	sp, r7
 80004ce:	bd80      	pop	{r7, pc}
 80004d0:	20000008 	.word	0x20000008
 80004d4:	20000000 	.word	0x20000000
 80004d8:	20000004 	.word	0x20000004

080004dc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80004dc:	b480      	push	{r7}
 80004de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80004e0:	4b05      	ldr	r3, [pc, #20]	@ (80004f8 <HAL_IncTick+0x1c>)
 80004e2:	681a      	ldr	r2, [r3, #0]
 80004e4:	4b05      	ldr	r3, [pc, #20]	@ (80004fc <HAL_IncTick+0x20>)
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	4413      	add	r3, r2
 80004ea:	4a03      	ldr	r2, [pc, #12]	@ (80004f8 <HAL_IncTick+0x1c>)
 80004ec:	6013      	str	r3, [r2, #0]
}
 80004ee:	bf00      	nop
 80004f0:	46bd      	mov	sp, r7
 80004f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f6:	4770      	bx	lr
 80004f8:	20000028 	.word	0x20000028
 80004fc:	20000008 	.word	0x20000008

08000500 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000500:	b480      	push	{r7}
 8000502:	af00      	add	r7, sp, #0
  return uwTick;
 8000504:	4b03      	ldr	r3, [pc, #12]	@ (8000514 <HAL_GetTick+0x14>)
 8000506:	681b      	ldr	r3, [r3, #0]
}
 8000508:	4618      	mov	r0, r3
 800050a:	46bd      	mov	sp, r7
 800050c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop
 8000514:	20000028 	.word	0x20000028

08000518 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000518:	b480      	push	{r7}
 800051a:	b085      	sub	sp, #20
 800051c:	af00      	add	r7, sp, #0
 800051e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	f003 0307 	and.w	r3, r3, #7
 8000526:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000528:	4b0c      	ldr	r3, [pc, #48]	@ (800055c <__NVIC_SetPriorityGrouping+0x44>)
 800052a:	68db      	ldr	r3, [r3, #12]
 800052c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800052e:	68ba      	ldr	r2, [r7, #8]
 8000530:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000534:	4013      	ands	r3, r2
 8000536:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000538:	68fb      	ldr	r3, [r7, #12]
 800053a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800053c:	68bb      	ldr	r3, [r7, #8]
 800053e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000540:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000544:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000548:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800054a:	4a04      	ldr	r2, [pc, #16]	@ (800055c <__NVIC_SetPriorityGrouping+0x44>)
 800054c:	68bb      	ldr	r3, [r7, #8]
 800054e:	60d3      	str	r3, [r2, #12]
}
 8000550:	bf00      	nop
 8000552:	3714      	adds	r7, #20
 8000554:	46bd      	mov	sp, r7
 8000556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055a:	4770      	bx	lr
 800055c:	e000ed00 	.word	0xe000ed00

08000560 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000560:	b480      	push	{r7}
 8000562:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000564:	4b04      	ldr	r3, [pc, #16]	@ (8000578 <__NVIC_GetPriorityGrouping+0x18>)
 8000566:	68db      	ldr	r3, [r3, #12]
 8000568:	0a1b      	lsrs	r3, r3, #8
 800056a:	f003 0307 	and.w	r3, r3, #7
}
 800056e:	4618      	mov	r0, r3
 8000570:	46bd      	mov	sp, r7
 8000572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000576:	4770      	bx	lr
 8000578:	e000ed00 	.word	0xe000ed00

0800057c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800057c:	b480      	push	{r7}
 800057e:	b083      	sub	sp, #12
 8000580:	af00      	add	r7, sp, #0
 8000582:	4603      	mov	r3, r0
 8000584:	6039      	str	r1, [r7, #0]
 8000586:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000588:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800058c:	2b00      	cmp	r3, #0
 800058e:	db0a      	blt.n	80005a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000590:	683b      	ldr	r3, [r7, #0]
 8000592:	b2da      	uxtb	r2, r3
 8000594:	490c      	ldr	r1, [pc, #48]	@ (80005c8 <__NVIC_SetPriority+0x4c>)
 8000596:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800059a:	0112      	lsls	r2, r2, #4
 800059c:	b2d2      	uxtb	r2, r2
 800059e:	440b      	add	r3, r1
 80005a0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80005a4:	e00a      	b.n	80005bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005a6:	683b      	ldr	r3, [r7, #0]
 80005a8:	b2da      	uxtb	r2, r3
 80005aa:	4908      	ldr	r1, [pc, #32]	@ (80005cc <__NVIC_SetPriority+0x50>)
 80005ac:	79fb      	ldrb	r3, [r7, #7]
 80005ae:	f003 030f 	and.w	r3, r3, #15
 80005b2:	3b04      	subs	r3, #4
 80005b4:	0112      	lsls	r2, r2, #4
 80005b6:	b2d2      	uxtb	r2, r2
 80005b8:	440b      	add	r3, r1
 80005ba:	761a      	strb	r2, [r3, #24]
}
 80005bc:	bf00      	nop
 80005be:	370c      	adds	r7, #12
 80005c0:	46bd      	mov	sp, r7
 80005c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c6:	4770      	bx	lr
 80005c8:	e000e100 	.word	0xe000e100
 80005cc:	e000ed00 	.word	0xe000ed00

080005d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80005d0:	b480      	push	{r7}
 80005d2:	b089      	sub	sp, #36	@ 0x24
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	60f8      	str	r0, [r7, #12]
 80005d8:	60b9      	str	r1, [r7, #8]
 80005da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80005dc:	68fb      	ldr	r3, [r7, #12]
 80005de:	f003 0307 	and.w	r3, r3, #7
 80005e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005e4:	69fb      	ldr	r3, [r7, #28]
 80005e6:	f1c3 0307 	rsb	r3, r3, #7
 80005ea:	2b04      	cmp	r3, #4
 80005ec:	bf28      	it	cs
 80005ee:	2304      	movcs	r3, #4
 80005f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005f2:	69fb      	ldr	r3, [r7, #28]
 80005f4:	3304      	adds	r3, #4
 80005f6:	2b06      	cmp	r3, #6
 80005f8:	d902      	bls.n	8000600 <NVIC_EncodePriority+0x30>
 80005fa:	69fb      	ldr	r3, [r7, #28]
 80005fc:	3b03      	subs	r3, #3
 80005fe:	e000      	b.n	8000602 <NVIC_EncodePriority+0x32>
 8000600:	2300      	movs	r3, #0
 8000602:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000604:	f04f 32ff 	mov.w	r2, #4294967295
 8000608:	69bb      	ldr	r3, [r7, #24]
 800060a:	fa02 f303 	lsl.w	r3, r2, r3
 800060e:	43da      	mvns	r2, r3
 8000610:	68bb      	ldr	r3, [r7, #8]
 8000612:	401a      	ands	r2, r3
 8000614:	697b      	ldr	r3, [r7, #20]
 8000616:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000618:	f04f 31ff 	mov.w	r1, #4294967295
 800061c:	697b      	ldr	r3, [r7, #20]
 800061e:	fa01 f303 	lsl.w	r3, r1, r3
 8000622:	43d9      	mvns	r1, r3
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000628:	4313      	orrs	r3, r2
         );
}
 800062a:	4618      	mov	r0, r3
 800062c:	3724      	adds	r7, #36	@ 0x24
 800062e:	46bd      	mov	sp, r7
 8000630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000634:	4770      	bx	lr
	...

08000638 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b082      	sub	sp, #8
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	3b01      	subs	r3, #1
 8000644:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000648:	d301      	bcc.n	800064e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800064a:	2301      	movs	r3, #1
 800064c:	e00f      	b.n	800066e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800064e:	4a0a      	ldr	r2, [pc, #40]	@ (8000678 <SysTick_Config+0x40>)
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	3b01      	subs	r3, #1
 8000654:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000656:	210f      	movs	r1, #15
 8000658:	f04f 30ff 	mov.w	r0, #4294967295
 800065c:	f7ff ff8e 	bl	800057c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000660:	4b05      	ldr	r3, [pc, #20]	@ (8000678 <SysTick_Config+0x40>)
 8000662:	2200      	movs	r2, #0
 8000664:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000666:	4b04      	ldr	r3, [pc, #16]	@ (8000678 <SysTick_Config+0x40>)
 8000668:	2207      	movs	r2, #7
 800066a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800066c:	2300      	movs	r3, #0
}
 800066e:	4618      	mov	r0, r3
 8000670:	3708      	adds	r7, #8
 8000672:	46bd      	mov	sp, r7
 8000674:	bd80      	pop	{r7, pc}
 8000676:	bf00      	nop
 8000678:	e000e010 	.word	0xe000e010

0800067c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b082      	sub	sp, #8
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000684:	6878      	ldr	r0, [r7, #4]
 8000686:	f7ff ff47 	bl	8000518 <__NVIC_SetPriorityGrouping>
}
 800068a:	bf00      	nop
 800068c:	3708      	adds	r7, #8
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}

08000692 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000692:	b580      	push	{r7, lr}
 8000694:	b086      	sub	sp, #24
 8000696:	af00      	add	r7, sp, #0
 8000698:	4603      	mov	r3, r0
 800069a:	60b9      	str	r1, [r7, #8]
 800069c:	607a      	str	r2, [r7, #4]
 800069e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80006a0:	f7ff ff5e 	bl	8000560 <__NVIC_GetPriorityGrouping>
 80006a4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80006a6:	687a      	ldr	r2, [r7, #4]
 80006a8:	68b9      	ldr	r1, [r7, #8]
 80006aa:	6978      	ldr	r0, [r7, #20]
 80006ac:	f7ff ff90 	bl	80005d0 <NVIC_EncodePriority>
 80006b0:	4602      	mov	r2, r0
 80006b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80006b6:	4611      	mov	r1, r2
 80006b8:	4618      	mov	r0, r3
 80006ba:	f7ff ff5f 	bl	800057c <__NVIC_SetPriority>
}
 80006be:	bf00      	nop
 80006c0:	3718      	adds	r7, #24
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}

080006c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80006c6:	b580      	push	{r7, lr}
 80006c8:	b082      	sub	sp, #8
 80006ca:	af00      	add	r7, sp, #0
 80006cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80006ce:	6878      	ldr	r0, [r7, #4]
 80006d0:	f7ff ffb2 	bl	8000638 <SysTick_Config>
 80006d4:	4603      	mov	r3, r0
}
 80006d6:	4618      	mov	r0, r3
 80006d8:	3708      	adds	r7, #8
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}
	...

080006e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80006e0:	b480      	push	{r7}
 80006e2:	b087      	sub	sp, #28
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
 80006e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80006ea:	2300      	movs	r3, #0
 80006ec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80006ee:	e15a      	b.n	80009a6 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80006f0:	683b      	ldr	r3, [r7, #0]
 80006f2:	681a      	ldr	r2, [r3, #0]
 80006f4:	2101      	movs	r1, #1
 80006f6:	697b      	ldr	r3, [r7, #20]
 80006f8:	fa01 f303 	lsl.w	r3, r1, r3
 80006fc:	4013      	ands	r3, r2
 80006fe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000700:	68fb      	ldr	r3, [r7, #12]
 8000702:	2b00      	cmp	r3, #0
 8000704:	f000 814c 	beq.w	80009a0 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000708:	683b      	ldr	r3, [r7, #0]
 800070a:	685b      	ldr	r3, [r3, #4]
 800070c:	f003 0303 	and.w	r3, r3, #3
 8000710:	2b01      	cmp	r3, #1
 8000712:	d005      	beq.n	8000720 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000714:	683b      	ldr	r3, [r7, #0]
 8000716:	685b      	ldr	r3, [r3, #4]
 8000718:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800071c:	2b02      	cmp	r3, #2
 800071e:	d130      	bne.n	8000782 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	689b      	ldr	r3, [r3, #8]
 8000724:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000726:	697b      	ldr	r3, [r7, #20]
 8000728:	005b      	lsls	r3, r3, #1
 800072a:	2203      	movs	r2, #3
 800072c:	fa02 f303 	lsl.w	r3, r2, r3
 8000730:	43db      	mvns	r3, r3
 8000732:	693a      	ldr	r2, [r7, #16]
 8000734:	4013      	ands	r3, r2
 8000736:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000738:	683b      	ldr	r3, [r7, #0]
 800073a:	68da      	ldr	r2, [r3, #12]
 800073c:	697b      	ldr	r3, [r7, #20]
 800073e:	005b      	lsls	r3, r3, #1
 8000740:	fa02 f303 	lsl.w	r3, r2, r3
 8000744:	693a      	ldr	r2, [r7, #16]
 8000746:	4313      	orrs	r3, r2
 8000748:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	693a      	ldr	r2, [r7, #16]
 800074e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	685b      	ldr	r3, [r3, #4]
 8000754:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000756:	2201      	movs	r2, #1
 8000758:	697b      	ldr	r3, [r7, #20]
 800075a:	fa02 f303 	lsl.w	r3, r2, r3
 800075e:	43db      	mvns	r3, r3
 8000760:	693a      	ldr	r2, [r7, #16]
 8000762:	4013      	ands	r3, r2
 8000764:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000766:	683b      	ldr	r3, [r7, #0]
 8000768:	685b      	ldr	r3, [r3, #4]
 800076a:	091b      	lsrs	r3, r3, #4
 800076c:	f003 0201 	and.w	r2, r3, #1
 8000770:	697b      	ldr	r3, [r7, #20]
 8000772:	fa02 f303 	lsl.w	r3, r2, r3
 8000776:	693a      	ldr	r2, [r7, #16]
 8000778:	4313      	orrs	r3, r2
 800077a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	693a      	ldr	r2, [r7, #16]
 8000780:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000782:	683b      	ldr	r3, [r7, #0]
 8000784:	685b      	ldr	r3, [r3, #4]
 8000786:	f003 0303 	and.w	r3, r3, #3
 800078a:	2b03      	cmp	r3, #3
 800078c:	d017      	beq.n	80007be <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	68db      	ldr	r3, [r3, #12]
 8000792:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000794:	697b      	ldr	r3, [r7, #20]
 8000796:	005b      	lsls	r3, r3, #1
 8000798:	2203      	movs	r2, #3
 800079a:	fa02 f303 	lsl.w	r3, r2, r3
 800079e:	43db      	mvns	r3, r3
 80007a0:	693a      	ldr	r2, [r7, #16]
 80007a2:	4013      	ands	r3, r2
 80007a4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80007a6:	683b      	ldr	r3, [r7, #0]
 80007a8:	689a      	ldr	r2, [r3, #8]
 80007aa:	697b      	ldr	r3, [r7, #20]
 80007ac:	005b      	lsls	r3, r3, #1
 80007ae:	fa02 f303 	lsl.w	r3, r2, r3
 80007b2:	693a      	ldr	r2, [r7, #16]
 80007b4:	4313      	orrs	r3, r2
 80007b6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	693a      	ldr	r2, [r7, #16]
 80007bc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80007be:	683b      	ldr	r3, [r7, #0]
 80007c0:	685b      	ldr	r3, [r3, #4]
 80007c2:	f003 0303 	and.w	r3, r3, #3
 80007c6:	2b02      	cmp	r3, #2
 80007c8:	d123      	bne.n	8000812 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80007ca:	697b      	ldr	r3, [r7, #20]
 80007cc:	08da      	lsrs	r2, r3, #3
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	3208      	adds	r2, #8
 80007d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80007d6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80007d8:	697b      	ldr	r3, [r7, #20]
 80007da:	f003 0307 	and.w	r3, r3, #7
 80007de:	009b      	lsls	r3, r3, #2
 80007e0:	220f      	movs	r2, #15
 80007e2:	fa02 f303 	lsl.w	r3, r2, r3
 80007e6:	43db      	mvns	r3, r3
 80007e8:	693a      	ldr	r2, [r7, #16]
 80007ea:	4013      	ands	r3, r2
 80007ec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80007ee:	683b      	ldr	r3, [r7, #0]
 80007f0:	691a      	ldr	r2, [r3, #16]
 80007f2:	697b      	ldr	r3, [r7, #20]
 80007f4:	f003 0307 	and.w	r3, r3, #7
 80007f8:	009b      	lsls	r3, r3, #2
 80007fa:	fa02 f303 	lsl.w	r3, r2, r3
 80007fe:	693a      	ldr	r2, [r7, #16]
 8000800:	4313      	orrs	r3, r2
 8000802:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000804:	697b      	ldr	r3, [r7, #20]
 8000806:	08da      	lsrs	r2, r3, #3
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	3208      	adds	r2, #8
 800080c:	6939      	ldr	r1, [r7, #16]
 800080e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000818:	697b      	ldr	r3, [r7, #20]
 800081a:	005b      	lsls	r3, r3, #1
 800081c:	2203      	movs	r2, #3
 800081e:	fa02 f303 	lsl.w	r3, r2, r3
 8000822:	43db      	mvns	r3, r3
 8000824:	693a      	ldr	r2, [r7, #16]
 8000826:	4013      	ands	r3, r2
 8000828:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800082a:	683b      	ldr	r3, [r7, #0]
 800082c:	685b      	ldr	r3, [r3, #4]
 800082e:	f003 0203 	and.w	r2, r3, #3
 8000832:	697b      	ldr	r3, [r7, #20]
 8000834:	005b      	lsls	r3, r3, #1
 8000836:	fa02 f303 	lsl.w	r3, r2, r3
 800083a:	693a      	ldr	r2, [r7, #16]
 800083c:	4313      	orrs	r3, r2
 800083e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	693a      	ldr	r2, [r7, #16]
 8000844:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000846:	683b      	ldr	r3, [r7, #0]
 8000848:	685b      	ldr	r3, [r3, #4]
 800084a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800084e:	2b00      	cmp	r3, #0
 8000850:	f000 80a6 	beq.w	80009a0 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000854:	4b5b      	ldr	r3, [pc, #364]	@ (80009c4 <HAL_GPIO_Init+0x2e4>)
 8000856:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000858:	4a5a      	ldr	r2, [pc, #360]	@ (80009c4 <HAL_GPIO_Init+0x2e4>)
 800085a:	f043 0301 	orr.w	r3, r3, #1
 800085e:	6613      	str	r3, [r2, #96]	@ 0x60
 8000860:	4b58      	ldr	r3, [pc, #352]	@ (80009c4 <HAL_GPIO_Init+0x2e4>)
 8000862:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000864:	f003 0301 	and.w	r3, r3, #1
 8000868:	60bb      	str	r3, [r7, #8]
 800086a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800086c:	4a56      	ldr	r2, [pc, #344]	@ (80009c8 <HAL_GPIO_Init+0x2e8>)
 800086e:	697b      	ldr	r3, [r7, #20]
 8000870:	089b      	lsrs	r3, r3, #2
 8000872:	3302      	adds	r3, #2
 8000874:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000878:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800087a:	697b      	ldr	r3, [r7, #20]
 800087c:	f003 0303 	and.w	r3, r3, #3
 8000880:	009b      	lsls	r3, r3, #2
 8000882:	220f      	movs	r2, #15
 8000884:	fa02 f303 	lsl.w	r3, r2, r3
 8000888:	43db      	mvns	r3, r3
 800088a:	693a      	ldr	r2, [r7, #16]
 800088c:	4013      	ands	r3, r2
 800088e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000896:	d01f      	beq.n	80008d8 <HAL_GPIO_Init+0x1f8>
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	4a4c      	ldr	r2, [pc, #304]	@ (80009cc <HAL_GPIO_Init+0x2ec>)
 800089c:	4293      	cmp	r3, r2
 800089e:	d019      	beq.n	80008d4 <HAL_GPIO_Init+0x1f4>
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	4a4b      	ldr	r2, [pc, #300]	@ (80009d0 <HAL_GPIO_Init+0x2f0>)
 80008a4:	4293      	cmp	r3, r2
 80008a6:	d013      	beq.n	80008d0 <HAL_GPIO_Init+0x1f0>
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	4a4a      	ldr	r2, [pc, #296]	@ (80009d4 <HAL_GPIO_Init+0x2f4>)
 80008ac:	4293      	cmp	r3, r2
 80008ae:	d00d      	beq.n	80008cc <HAL_GPIO_Init+0x1ec>
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	4a49      	ldr	r2, [pc, #292]	@ (80009d8 <HAL_GPIO_Init+0x2f8>)
 80008b4:	4293      	cmp	r3, r2
 80008b6:	d007      	beq.n	80008c8 <HAL_GPIO_Init+0x1e8>
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	4a48      	ldr	r2, [pc, #288]	@ (80009dc <HAL_GPIO_Init+0x2fc>)
 80008bc:	4293      	cmp	r3, r2
 80008be:	d101      	bne.n	80008c4 <HAL_GPIO_Init+0x1e4>
 80008c0:	2305      	movs	r3, #5
 80008c2:	e00a      	b.n	80008da <HAL_GPIO_Init+0x1fa>
 80008c4:	2306      	movs	r3, #6
 80008c6:	e008      	b.n	80008da <HAL_GPIO_Init+0x1fa>
 80008c8:	2304      	movs	r3, #4
 80008ca:	e006      	b.n	80008da <HAL_GPIO_Init+0x1fa>
 80008cc:	2303      	movs	r3, #3
 80008ce:	e004      	b.n	80008da <HAL_GPIO_Init+0x1fa>
 80008d0:	2302      	movs	r3, #2
 80008d2:	e002      	b.n	80008da <HAL_GPIO_Init+0x1fa>
 80008d4:	2301      	movs	r3, #1
 80008d6:	e000      	b.n	80008da <HAL_GPIO_Init+0x1fa>
 80008d8:	2300      	movs	r3, #0
 80008da:	697a      	ldr	r2, [r7, #20]
 80008dc:	f002 0203 	and.w	r2, r2, #3
 80008e0:	0092      	lsls	r2, r2, #2
 80008e2:	4093      	lsls	r3, r2
 80008e4:	693a      	ldr	r2, [r7, #16]
 80008e6:	4313      	orrs	r3, r2
 80008e8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80008ea:	4937      	ldr	r1, [pc, #220]	@ (80009c8 <HAL_GPIO_Init+0x2e8>)
 80008ec:	697b      	ldr	r3, [r7, #20]
 80008ee:	089b      	lsrs	r3, r3, #2
 80008f0:	3302      	adds	r3, #2
 80008f2:	693a      	ldr	r2, [r7, #16]
 80008f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80008f8:	4b39      	ldr	r3, [pc, #228]	@ (80009e0 <HAL_GPIO_Init+0x300>)
 80008fa:	689b      	ldr	r3, [r3, #8]
 80008fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80008fe:	68fb      	ldr	r3, [r7, #12]
 8000900:	43db      	mvns	r3, r3
 8000902:	693a      	ldr	r2, [r7, #16]
 8000904:	4013      	ands	r3, r2
 8000906:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000908:	683b      	ldr	r3, [r7, #0]
 800090a:	685b      	ldr	r3, [r3, #4]
 800090c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000910:	2b00      	cmp	r3, #0
 8000912:	d003      	beq.n	800091c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8000914:	693a      	ldr	r2, [r7, #16]
 8000916:	68fb      	ldr	r3, [r7, #12]
 8000918:	4313      	orrs	r3, r2
 800091a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800091c:	4a30      	ldr	r2, [pc, #192]	@ (80009e0 <HAL_GPIO_Init+0x300>)
 800091e:	693b      	ldr	r3, [r7, #16]
 8000920:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000922:	4b2f      	ldr	r3, [pc, #188]	@ (80009e0 <HAL_GPIO_Init+0x300>)
 8000924:	68db      	ldr	r3, [r3, #12]
 8000926:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000928:	68fb      	ldr	r3, [r7, #12]
 800092a:	43db      	mvns	r3, r3
 800092c:	693a      	ldr	r2, [r7, #16]
 800092e:	4013      	ands	r3, r2
 8000930:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000932:	683b      	ldr	r3, [r7, #0]
 8000934:	685b      	ldr	r3, [r3, #4]
 8000936:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800093a:	2b00      	cmp	r3, #0
 800093c:	d003      	beq.n	8000946 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800093e:	693a      	ldr	r2, [r7, #16]
 8000940:	68fb      	ldr	r3, [r7, #12]
 8000942:	4313      	orrs	r3, r2
 8000944:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000946:	4a26      	ldr	r2, [pc, #152]	@ (80009e0 <HAL_GPIO_Init+0x300>)
 8000948:	693b      	ldr	r3, [r7, #16]
 800094a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800094c:	4b24      	ldr	r3, [pc, #144]	@ (80009e0 <HAL_GPIO_Init+0x300>)
 800094e:	685b      	ldr	r3, [r3, #4]
 8000950:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000952:	68fb      	ldr	r3, [r7, #12]
 8000954:	43db      	mvns	r3, r3
 8000956:	693a      	ldr	r2, [r7, #16]
 8000958:	4013      	ands	r3, r2
 800095a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800095c:	683b      	ldr	r3, [r7, #0]
 800095e:	685b      	ldr	r3, [r3, #4]
 8000960:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000964:	2b00      	cmp	r3, #0
 8000966:	d003      	beq.n	8000970 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8000968:	693a      	ldr	r2, [r7, #16]
 800096a:	68fb      	ldr	r3, [r7, #12]
 800096c:	4313      	orrs	r3, r2
 800096e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000970:	4a1b      	ldr	r2, [pc, #108]	@ (80009e0 <HAL_GPIO_Init+0x300>)
 8000972:	693b      	ldr	r3, [r7, #16]
 8000974:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000976:	4b1a      	ldr	r3, [pc, #104]	@ (80009e0 <HAL_GPIO_Init+0x300>)
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800097c:	68fb      	ldr	r3, [r7, #12]
 800097e:	43db      	mvns	r3, r3
 8000980:	693a      	ldr	r2, [r7, #16]
 8000982:	4013      	ands	r3, r2
 8000984:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000986:	683b      	ldr	r3, [r7, #0]
 8000988:	685b      	ldr	r3, [r3, #4]
 800098a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800098e:	2b00      	cmp	r3, #0
 8000990:	d003      	beq.n	800099a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8000992:	693a      	ldr	r2, [r7, #16]
 8000994:	68fb      	ldr	r3, [r7, #12]
 8000996:	4313      	orrs	r3, r2
 8000998:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800099a:	4a11      	ldr	r2, [pc, #68]	@ (80009e0 <HAL_GPIO_Init+0x300>)
 800099c:	693b      	ldr	r3, [r7, #16]
 800099e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80009a0:	697b      	ldr	r3, [r7, #20]
 80009a2:	3301      	adds	r3, #1
 80009a4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80009a6:	683b      	ldr	r3, [r7, #0]
 80009a8:	681a      	ldr	r2, [r3, #0]
 80009aa:	697b      	ldr	r3, [r7, #20]
 80009ac:	fa22 f303 	lsr.w	r3, r2, r3
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	f47f ae9d 	bne.w	80006f0 <HAL_GPIO_Init+0x10>
  }
}
 80009b6:	bf00      	nop
 80009b8:	bf00      	nop
 80009ba:	371c      	adds	r7, #28
 80009bc:	46bd      	mov	sp, r7
 80009be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c2:	4770      	bx	lr
 80009c4:	40021000 	.word	0x40021000
 80009c8:	40010000 	.word	0x40010000
 80009cc:	48000400 	.word	0x48000400
 80009d0:	48000800 	.word	0x48000800
 80009d4:	48000c00 	.word	0x48000c00
 80009d8:	48001000 	.word	0x48001000
 80009dc:	48001400 	.word	0x48001400
 80009e0:	40010400 	.word	0x40010400

080009e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80009e4:	b480      	push	{r7}
 80009e6:	b083      	sub	sp, #12
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
 80009ec:	460b      	mov	r3, r1
 80009ee:	807b      	strh	r3, [r7, #2]
 80009f0:	4613      	mov	r3, r2
 80009f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80009f4:	787b      	ldrb	r3, [r7, #1]
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d003      	beq.n	8000a02 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80009fa:	887a      	ldrh	r2, [r7, #2]
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000a00:	e002      	b.n	8000a08 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000a02:	887a      	ldrh	r2, [r7, #2]
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000a08:	bf00      	nop
 8000a0a:	370c      	adds	r7, #12
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a12:	4770      	bx	lr

08000a14 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000a14:	b480      	push	{r7}
 8000a16:	b085      	sub	sp, #20
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d141      	bne.n	8000aa6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000a22:	4b4b      	ldr	r3, [pc, #300]	@ (8000b50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000a2a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000a2e:	d131      	bne.n	8000a94 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000a30:	4b47      	ldr	r3, [pc, #284]	@ (8000b50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000a32:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000a36:	4a46      	ldr	r2, [pc, #280]	@ (8000b50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000a38:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8000a3c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a40:	4b43      	ldr	r3, [pc, #268]	@ (8000b50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000a48:	4a41      	ldr	r2, [pc, #260]	@ (8000b50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000a4a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000a4e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000a50:	4b40      	ldr	r3, [pc, #256]	@ (8000b54 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	2232      	movs	r2, #50	@ 0x32
 8000a56:	fb02 f303 	mul.w	r3, r2, r3
 8000a5a:	4a3f      	ldr	r2, [pc, #252]	@ (8000b58 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8000a5c:	fba2 2303 	umull	r2, r3, r2, r3
 8000a60:	0c9b      	lsrs	r3, r3, #18
 8000a62:	3301      	adds	r3, #1
 8000a64:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000a66:	e002      	b.n	8000a6e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8000a68:	68fb      	ldr	r3, [r7, #12]
 8000a6a:	3b01      	subs	r3, #1
 8000a6c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000a6e:	4b38      	ldr	r3, [pc, #224]	@ (8000b50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000a70:	695b      	ldr	r3, [r3, #20]
 8000a72:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000a76:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000a7a:	d102      	bne.n	8000a82 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8000a7c:	68fb      	ldr	r3, [r7, #12]
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d1f2      	bne.n	8000a68 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000a82:	4b33      	ldr	r3, [pc, #204]	@ (8000b50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000a84:	695b      	ldr	r3, [r3, #20]
 8000a86:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000a8a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000a8e:	d158      	bne.n	8000b42 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8000a90:	2303      	movs	r3, #3
 8000a92:	e057      	b.n	8000b44 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000a94:	4b2e      	ldr	r3, [pc, #184]	@ (8000b50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000a96:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000a9a:	4a2d      	ldr	r2, [pc, #180]	@ (8000b50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000a9c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8000aa0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8000aa4:	e04d      	b.n	8000b42 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000aac:	d141      	bne.n	8000b32 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000aae:	4b28      	ldr	r3, [pc, #160]	@ (8000b50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000ab6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000aba:	d131      	bne.n	8000b20 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000abc:	4b24      	ldr	r3, [pc, #144]	@ (8000b50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000abe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000ac2:	4a23      	ldr	r2, [pc, #140]	@ (8000b50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000ac4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000ac8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000acc:	4b20      	ldr	r3, [pc, #128]	@ (8000b50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000ad4:	4a1e      	ldr	r2, [pc, #120]	@ (8000b50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000ad6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000ada:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000adc:	4b1d      	ldr	r3, [pc, #116]	@ (8000b54 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	2232      	movs	r2, #50	@ 0x32
 8000ae2:	fb02 f303 	mul.w	r3, r2, r3
 8000ae6:	4a1c      	ldr	r2, [pc, #112]	@ (8000b58 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8000ae8:	fba2 2303 	umull	r2, r3, r2, r3
 8000aec:	0c9b      	lsrs	r3, r3, #18
 8000aee:	3301      	adds	r3, #1
 8000af0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000af2:	e002      	b.n	8000afa <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	3b01      	subs	r3, #1
 8000af8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000afa:	4b15      	ldr	r3, [pc, #84]	@ (8000b50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000afc:	695b      	ldr	r3, [r3, #20]
 8000afe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000b02:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000b06:	d102      	bne.n	8000b0e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8000b08:	68fb      	ldr	r3, [r7, #12]
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d1f2      	bne.n	8000af4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000b0e:	4b10      	ldr	r3, [pc, #64]	@ (8000b50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000b10:	695b      	ldr	r3, [r3, #20]
 8000b12:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000b16:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000b1a:	d112      	bne.n	8000b42 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8000b1c:	2303      	movs	r3, #3
 8000b1e:	e011      	b.n	8000b44 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000b20:	4b0b      	ldr	r3, [pc, #44]	@ (8000b50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000b22:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000b26:	4a0a      	ldr	r2, [pc, #40]	@ (8000b50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000b28:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000b2c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8000b30:	e007      	b.n	8000b42 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000b32:	4b07      	ldr	r3, [pc, #28]	@ (8000b50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000b3a:	4a05      	ldr	r2, [pc, #20]	@ (8000b50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000b3c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000b40:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8000b42:	2300      	movs	r3, #0
}
 8000b44:	4618      	mov	r0, r3
 8000b46:	3714      	adds	r7, #20
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4e:	4770      	bx	lr
 8000b50:	40007000 	.word	0x40007000
 8000b54:	20000000 	.word	0x20000000
 8000b58:	431bde83 	.word	0x431bde83

08000b5c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b088      	sub	sp, #32
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d101      	bne.n	8000b6e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000b6a:	2301      	movs	r3, #1
 8000b6c:	e2fe      	b.n	800116c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	f003 0301 	and.w	r3, r3, #1
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d075      	beq.n	8000c66 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000b7a:	4b97      	ldr	r3, [pc, #604]	@ (8000dd8 <HAL_RCC_OscConfig+0x27c>)
 8000b7c:	689b      	ldr	r3, [r3, #8]
 8000b7e:	f003 030c 	and.w	r3, r3, #12
 8000b82:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000b84:	4b94      	ldr	r3, [pc, #592]	@ (8000dd8 <HAL_RCC_OscConfig+0x27c>)
 8000b86:	68db      	ldr	r3, [r3, #12]
 8000b88:	f003 0303 	and.w	r3, r3, #3
 8000b8c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8000b8e:	69bb      	ldr	r3, [r7, #24]
 8000b90:	2b0c      	cmp	r3, #12
 8000b92:	d102      	bne.n	8000b9a <HAL_RCC_OscConfig+0x3e>
 8000b94:	697b      	ldr	r3, [r7, #20]
 8000b96:	2b03      	cmp	r3, #3
 8000b98:	d002      	beq.n	8000ba0 <HAL_RCC_OscConfig+0x44>
 8000b9a:	69bb      	ldr	r3, [r7, #24]
 8000b9c:	2b08      	cmp	r3, #8
 8000b9e:	d10b      	bne.n	8000bb8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ba0:	4b8d      	ldr	r3, [pc, #564]	@ (8000dd8 <HAL_RCC_OscConfig+0x27c>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d05b      	beq.n	8000c64 <HAL_RCC_OscConfig+0x108>
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	685b      	ldr	r3, [r3, #4]
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d157      	bne.n	8000c64 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000bb4:	2301      	movs	r3, #1
 8000bb6:	e2d9      	b.n	800116c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	685b      	ldr	r3, [r3, #4]
 8000bbc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000bc0:	d106      	bne.n	8000bd0 <HAL_RCC_OscConfig+0x74>
 8000bc2:	4b85      	ldr	r3, [pc, #532]	@ (8000dd8 <HAL_RCC_OscConfig+0x27c>)
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	4a84      	ldr	r2, [pc, #528]	@ (8000dd8 <HAL_RCC_OscConfig+0x27c>)
 8000bc8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000bcc:	6013      	str	r3, [r2, #0]
 8000bce:	e01d      	b.n	8000c0c <HAL_RCC_OscConfig+0xb0>
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	685b      	ldr	r3, [r3, #4]
 8000bd4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000bd8:	d10c      	bne.n	8000bf4 <HAL_RCC_OscConfig+0x98>
 8000bda:	4b7f      	ldr	r3, [pc, #508]	@ (8000dd8 <HAL_RCC_OscConfig+0x27c>)
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	4a7e      	ldr	r2, [pc, #504]	@ (8000dd8 <HAL_RCC_OscConfig+0x27c>)
 8000be0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000be4:	6013      	str	r3, [r2, #0]
 8000be6:	4b7c      	ldr	r3, [pc, #496]	@ (8000dd8 <HAL_RCC_OscConfig+0x27c>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	4a7b      	ldr	r2, [pc, #492]	@ (8000dd8 <HAL_RCC_OscConfig+0x27c>)
 8000bec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000bf0:	6013      	str	r3, [r2, #0]
 8000bf2:	e00b      	b.n	8000c0c <HAL_RCC_OscConfig+0xb0>
 8000bf4:	4b78      	ldr	r3, [pc, #480]	@ (8000dd8 <HAL_RCC_OscConfig+0x27c>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	4a77      	ldr	r2, [pc, #476]	@ (8000dd8 <HAL_RCC_OscConfig+0x27c>)
 8000bfa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000bfe:	6013      	str	r3, [r2, #0]
 8000c00:	4b75      	ldr	r3, [pc, #468]	@ (8000dd8 <HAL_RCC_OscConfig+0x27c>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	4a74      	ldr	r2, [pc, #464]	@ (8000dd8 <HAL_RCC_OscConfig+0x27c>)
 8000c06:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000c0a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	685b      	ldr	r3, [r3, #4]
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d013      	beq.n	8000c3c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000c14:	f7ff fc74 	bl	8000500 <HAL_GetTick>
 8000c18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000c1a:	e008      	b.n	8000c2e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000c1c:	f7ff fc70 	bl	8000500 <HAL_GetTick>
 8000c20:	4602      	mov	r2, r0
 8000c22:	693b      	ldr	r3, [r7, #16]
 8000c24:	1ad3      	subs	r3, r2, r3
 8000c26:	2b64      	cmp	r3, #100	@ 0x64
 8000c28:	d901      	bls.n	8000c2e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000c2a:	2303      	movs	r3, #3
 8000c2c:	e29e      	b.n	800116c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000c2e:	4b6a      	ldr	r3, [pc, #424]	@ (8000dd8 <HAL_RCC_OscConfig+0x27c>)
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d0f0      	beq.n	8000c1c <HAL_RCC_OscConfig+0xc0>
 8000c3a:	e014      	b.n	8000c66 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000c3c:	f7ff fc60 	bl	8000500 <HAL_GetTick>
 8000c40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000c42:	e008      	b.n	8000c56 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000c44:	f7ff fc5c 	bl	8000500 <HAL_GetTick>
 8000c48:	4602      	mov	r2, r0
 8000c4a:	693b      	ldr	r3, [r7, #16]
 8000c4c:	1ad3      	subs	r3, r2, r3
 8000c4e:	2b64      	cmp	r3, #100	@ 0x64
 8000c50:	d901      	bls.n	8000c56 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000c52:	2303      	movs	r3, #3
 8000c54:	e28a      	b.n	800116c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000c56:	4b60      	ldr	r3, [pc, #384]	@ (8000dd8 <HAL_RCC_OscConfig+0x27c>)
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d1f0      	bne.n	8000c44 <HAL_RCC_OscConfig+0xe8>
 8000c62:	e000      	b.n	8000c66 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	f003 0302 	and.w	r3, r3, #2
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d075      	beq.n	8000d5e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000c72:	4b59      	ldr	r3, [pc, #356]	@ (8000dd8 <HAL_RCC_OscConfig+0x27c>)
 8000c74:	689b      	ldr	r3, [r3, #8]
 8000c76:	f003 030c 	and.w	r3, r3, #12
 8000c7a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000c7c:	4b56      	ldr	r3, [pc, #344]	@ (8000dd8 <HAL_RCC_OscConfig+0x27c>)
 8000c7e:	68db      	ldr	r3, [r3, #12]
 8000c80:	f003 0303 	and.w	r3, r3, #3
 8000c84:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8000c86:	69bb      	ldr	r3, [r7, #24]
 8000c88:	2b0c      	cmp	r3, #12
 8000c8a:	d102      	bne.n	8000c92 <HAL_RCC_OscConfig+0x136>
 8000c8c:	697b      	ldr	r3, [r7, #20]
 8000c8e:	2b02      	cmp	r3, #2
 8000c90:	d002      	beq.n	8000c98 <HAL_RCC_OscConfig+0x13c>
 8000c92:	69bb      	ldr	r3, [r7, #24]
 8000c94:	2b04      	cmp	r3, #4
 8000c96:	d11f      	bne.n	8000cd8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000c98:	4b4f      	ldr	r3, [pc, #316]	@ (8000dd8 <HAL_RCC_OscConfig+0x27c>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d005      	beq.n	8000cb0 <HAL_RCC_OscConfig+0x154>
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	68db      	ldr	r3, [r3, #12]
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d101      	bne.n	8000cb0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8000cac:	2301      	movs	r3, #1
 8000cae:	e25d      	b.n	800116c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000cb0:	4b49      	ldr	r3, [pc, #292]	@ (8000dd8 <HAL_RCC_OscConfig+0x27c>)
 8000cb2:	685b      	ldr	r3, [r3, #4]
 8000cb4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	691b      	ldr	r3, [r3, #16]
 8000cbc:	061b      	lsls	r3, r3, #24
 8000cbe:	4946      	ldr	r1, [pc, #280]	@ (8000dd8 <HAL_RCC_OscConfig+0x27c>)
 8000cc0:	4313      	orrs	r3, r2
 8000cc2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8000cc4:	4b45      	ldr	r3, [pc, #276]	@ (8000ddc <HAL_RCC_OscConfig+0x280>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	4618      	mov	r0, r3
 8000cca:	f7ff fbcd 	bl	8000468 <HAL_InitTick>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d043      	beq.n	8000d5c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8000cd4:	2301      	movs	r3, #1
 8000cd6:	e249      	b.n	800116c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	68db      	ldr	r3, [r3, #12]
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d023      	beq.n	8000d28 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000ce0:	4b3d      	ldr	r3, [pc, #244]	@ (8000dd8 <HAL_RCC_OscConfig+0x27c>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	4a3c      	ldr	r2, [pc, #240]	@ (8000dd8 <HAL_RCC_OscConfig+0x27c>)
 8000ce6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000cea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000cec:	f7ff fc08 	bl	8000500 <HAL_GetTick>
 8000cf0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000cf2:	e008      	b.n	8000d06 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000cf4:	f7ff fc04 	bl	8000500 <HAL_GetTick>
 8000cf8:	4602      	mov	r2, r0
 8000cfa:	693b      	ldr	r3, [r7, #16]
 8000cfc:	1ad3      	subs	r3, r2, r3
 8000cfe:	2b02      	cmp	r3, #2
 8000d00:	d901      	bls.n	8000d06 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8000d02:	2303      	movs	r3, #3
 8000d04:	e232      	b.n	800116c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000d06:	4b34      	ldr	r3, [pc, #208]	@ (8000dd8 <HAL_RCC_OscConfig+0x27c>)
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d0f0      	beq.n	8000cf4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d12:	4b31      	ldr	r3, [pc, #196]	@ (8000dd8 <HAL_RCC_OscConfig+0x27c>)
 8000d14:	685b      	ldr	r3, [r3, #4]
 8000d16:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	691b      	ldr	r3, [r3, #16]
 8000d1e:	061b      	lsls	r3, r3, #24
 8000d20:	492d      	ldr	r1, [pc, #180]	@ (8000dd8 <HAL_RCC_OscConfig+0x27c>)
 8000d22:	4313      	orrs	r3, r2
 8000d24:	604b      	str	r3, [r1, #4]
 8000d26:	e01a      	b.n	8000d5e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000d28:	4b2b      	ldr	r3, [pc, #172]	@ (8000dd8 <HAL_RCC_OscConfig+0x27c>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	4a2a      	ldr	r2, [pc, #168]	@ (8000dd8 <HAL_RCC_OscConfig+0x27c>)
 8000d2e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8000d32:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000d34:	f7ff fbe4 	bl	8000500 <HAL_GetTick>
 8000d38:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000d3a:	e008      	b.n	8000d4e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000d3c:	f7ff fbe0 	bl	8000500 <HAL_GetTick>
 8000d40:	4602      	mov	r2, r0
 8000d42:	693b      	ldr	r3, [r7, #16]
 8000d44:	1ad3      	subs	r3, r2, r3
 8000d46:	2b02      	cmp	r3, #2
 8000d48:	d901      	bls.n	8000d4e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8000d4a:	2303      	movs	r3, #3
 8000d4c:	e20e      	b.n	800116c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000d4e:	4b22      	ldr	r3, [pc, #136]	@ (8000dd8 <HAL_RCC_OscConfig+0x27c>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d1f0      	bne.n	8000d3c <HAL_RCC_OscConfig+0x1e0>
 8000d5a:	e000      	b.n	8000d5e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000d5c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	f003 0308 	and.w	r3, r3, #8
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d041      	beq.n	8000dee <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	695b      	ldr	r3, [r3, #20]
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d01c      	beq.n	8000dac <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000d72:	4b19      	ldr	r3, [pc, #100]	@ (8000dd8 <HAL_RCC_OscConfig+0x27c>)
 8000d74:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000d78:	4a17      	ldr	r2, [pc, #92]	@ (8000dd8 <HAL_RCC_OscConfig+0x27c>)
 8000d7a:	f043 0301 	orr.w	r3, r3, #1
 8000d7e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000d82:	f7ff fbbd 	bl	8000500 <HAL_GetTick>
 8000d86:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000d88:	e008      	b.n	8000d9c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000d8a:	f7ff fbb9 	bl	8000500 <HAL_GetTick>
 8000d8e:	4602      	mov	r2, r0
 8000d90:	693b      	ldr	r3, [r7, #16]
 8000d92:	1ad3      	subs	r3, r2, r3
 8000d94:	2b02      	cmp	r3, #2
 8000d96:	d901      	bls.n	8000d9c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8000d98:	2303      	movs	r3, #3
 8000d9a:	e1e7      	b.n	800116c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000d9c:	4b0e      	ldr	r3, [pc, #56]	@ (8000dd8 <HAL_RCC_OscConfig+0x27c>)
 8000d9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000da2:	f003 0302 	and.w	r3, r3, #2
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d0ef      	beq.n	8000d8a <HAL_RCC_OscConfig+0x22e>
 8000daa:	e020      	b.n	8000dee <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000dac:	4b0a      	ldr	r3, [pc, #40]	@ (8000dd8 <HAL_RCC_OscConfig+0x27c>)
 8000dae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000db2:	4a09      	ldr	r2, [pc, #36]	@ (8000dd8 <HAL_RCC_OscConfig+0x27c>)
 8000db4:	f023 0301 	bic.w	r3, r3, #1
 8000db8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000dbc:	f7ff fba0 	bl	8000500 <HAL_GetTick>
 8000dc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8000dc2:	e00d      	b.n	8000de0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000dc4:	f7ff fb9c 	bl	8000500 <HAL_GetTick>
 8000dc8:	4602      	mov	r2, r0
 8000dca:	693b      	ldr	r3, [r7, #16]
 8000dcc:	1ad3      	subs	r3, r2, r3
 8000dce:	2b02      	cmp	r3, #2
 8000dd0:	d906      	bls.n	8000de0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8000dd2:	2303      	movs	r3, #3
 8000dd4:	e1ca      	b.n	800116c <HAL_RCC_OscConfig+0x610>
 8000dd6:	bf00      	nop
 8000dd8:	40021000 	.word	0x40021000
 8000ddc:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8000de0:	4b8c      	ldr	r3, [pc, #560]	@ (8001014 <HAL_RCC_OscConfig+0x4b8>)
 8000de2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000de6:	f003 0302 	and.w	r3, r3, #2
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d1ea      	bne.n	8000dc4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	f003 0304 	and.w	r3, r3, #4
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	f000 80a6 	beq.w	8000f48 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8000e00:	4b84      	ldr	r3, [pc, #528]	@ (8001014 <HAL_RCC_OscConfig+0x4b8>)
 8000e02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e04:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d101      	bne.n	8000e10 <HAL_RCC_OscConfig+0x2b4>
 8000e0c:	2301      	movs	r3, #1
 8000e0e:	e000      	b.n	8000e12 <HAL_RCC_OscConfig+0x2b6>
 8000e10:	2300      	movs	r3, #0
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d00d      	beq.n	8000e32 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000e16:	4b7f      	ldr	r3, [pc, #508]	@ (8001014 <HAL_RCC_OscConfig+0x4b8>)
 8000e18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e1a:	4a7e      	ldr	r2, [pc, #504]	@ (8001014 <HAL_RCC_OscConfig+0x4b8>)
 8000e1c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e20:	6593      	str	r3, [r2, #88]	@ 0x58
 8000e22:	4b7c      	ldr	r3, [pc, #496]	@ (8001014 <HAL_RCC_OscConfig+0x4b8>)
 8000e24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e2a:	60fb      	str	r3, [r7, #12]
 8000e2c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8000e2e:	2301      	movs	r3, #1
 8000e30:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000e32:	4b79      	ldr	r3, [pc, #484]	@ (8001018 <HAL_RCC_OscConfig+0x4bc>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d118      	bne.n	8000e70 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8000e3e:	4b76      	ldr	r3, [pc, #472]	@ (8001018 <HAL_RCC_OscConfig+0x4bc>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	4a75      	ldr	r2, [pc, #468]	@ (8001018 <HAL_RCC_OscConfig+0x4bc>)
 8000e44:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e48:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000e4a:	f7ff fb59 	bl	8000500 <HAL_GetTick>
 8000e4e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000e50:	e008      	b.n	8000e64 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000e52:	f7ff fb55 	bl	8000500 <HAL_GetTick>
 8000e56:	4602      	mov	r2, r0
 8000e58:	693b      	ldr	r3, [r7, #16]
 8000e5a:	1ad3      	subs	r3, r2, r3
 8000e5c:	2b02      	cmp	r3, #2
 8000e5e:	d901      	bls.n	8000e64 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8000e60:	2303      	movs	r3, #3
 8000e62:	e183      	b.n	800116c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000e64:	4b6c      	ldr	r3, [pc, #432]	@ (8001018 <HAL_RCC_OscConfig+0x4bc>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d0f0      	beq.n	8000e52 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	689b      	ldr	r3, [r3, #8]
 8000e74:	2b01      	cmp	r3, #1
 8000e76:	d108      	bne.n	8000e8a <HAL_RCC_OscConfig+0x32e>
 8000e78:	4b66      	ldr	r3, [pc, #408]	@ (8001014 <HAL_RCC_OscConfig+0x4b8>)
 8000e7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000e7e:	4a65      	ldr	r2, [pc, #404]	@ (8001014 <HAL_RCC_OscConfig+0x4b8>)
 8000e80:	f043 0301 	orr.w	r3, r3, #1
 8000e84:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8000e88:	e024      	b.n	8000ed4 <HAL_RCC_OscConfig+0x378>
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	689b      	ldr	r3, [r3, #8]
 8000e8e:	2b05      	cmp	r3, #5
 8000e90:	d110      	bne.n	8000eb4 <HAL_RCC_OscConfig+0x358>
 8000e92:	4b60      	ldr	r3, [pc, #384]	@ (8001014 <HAL_RCC_OscConfig+0x4b8>)
 8000e94:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000e98:	4a5e      	ldr	r2, [pc, #376]	@ (8001014 <HAL_RCC_OscConfig+0x4b8>)
 8000e9a:	f043 0304 	orr.w	r3, r3, #4
 8000e9e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8000ea2:	4b5c      	ldr	r3, [pc, #368]	@ (8001014 <HAL_RCC_OscConfig+0x4b8>)
 8000ea4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000ea8:	4a5a      	ldr	r2, [pc, #360]	@ (8001014 <HAL_RCC_OscConfig+0x4b8>)
 8000eaa:	f043 0301 	orr.w	r3, r3, #1
 8000eae:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8000eb2:	e00f      	b.n	8000ed4 <HAL_RCC_OscConfig+0x378>
 8000eb4:	4b57      	ldr	r3, [pc, #348]	@ (8001014 <HAL_RCC_OscConfig+0x4b8>)
 8000eb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000eba:	4a56      	ldr	r2, [pc, #344]	@ (8001014 <HAL_RCC_OscConfig+0x4b8>)
 8000ebc:	f023 0301 	bic.w	r3, r3, #1
 8000ec0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8000ec4:	4b53      	ldr	r3, [pc, #332]	@ (8001014 <HAL_RCC_OscConfig+0x4b8>)
 8000ec6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000eca:	4a52      	ldr	r2, [pc, #328]	@ (8001014 <HAL_RCC_OscConfig+0x4b8>)
 8000ecc:	f023 0304 	bic.w	r3, r3, #4
 8000ed0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	689b      	ldr	r3, [r3, #8]
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d016      	beq.n	8000f0a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000edc:	f7ff fb10 	bl	8000500 <HAL_GetTick>
 8000ee0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8000ee2:	e00a      	b.n	8000efa <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000ee4:	f7ff fb0c 	bl	8000500 <HAL_GetTick>
 8000ee8:	4602      	mov	r2, r0
 8000eea:	693b      	ldr	r3, [r7, #16]
 8000eec:	1ad3      	subs	r3, r2, r3
 8000eee:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	d901      	bls.n	8000efa <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8000ef6:	2303      	movs	r3, #3
 8000ef8:	e138      	b.n	800116c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8000efa:	4b46      	ldr	r3, [pc, #280]	@ (8001014 <HAL_RCC_OscConfig+0x4b8>)
 8000efc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000f00:	f003 0302 	and.w	r3, r3, #2
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d0ed      	beq.n	8000ee4 <HAL_RCC_OscConfig+0x388>
 8000f08:	e015      	b.n	8000f36 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000f0a:	f7ff faf9 	bl	8000500 <HAL_GetTick>
 8000f0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8000f10:	e00a      	b.n	8000f28 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f12:	f7ff faf5 	bl	8000500 <HAL_GetTick>
 8000f16:	4602      	mov	r2, r0
 8000f18:	693b      	ldr	r3, [r7, #16]
 8000f1a:	1ad3      	subs	r3, r2, r3
 8000f1c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000f20:	4293      	cmp	r3, r2
 8000f22:	d901      	bls.n	8000f28 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8000f24:	2303      	movs	r3, #3
 8000f26:	e121      	b.n	800116c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8000f28:	4b3a      	ldr	r3, [pc, #232]	@ (8001014 <HAL_RCC_OscConfig+0x4b8>)
 8000f2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000f2e:	f003 0302 	and.w	r3, r3, #2
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d1ed      	bne.n	8000f12 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8000f36:	7ffb      	ldrb	r3, [r7, #31]
 8000f38:	2b01      	cmp	r3, #1
 8000f3a:	d105      	bne.n	8000f48 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000f3c:	4b35      	ldr	r3, [pc, #212]	@ (8001014 <HAL_RCC_OscConfig+0x4b8>)
 8000f3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f40:	4a34      	ldr	r2, [pc, #208]	@ (8001014 <HAL_RCC_OscConfig+0x4b8>)
 8000f42:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8000f46:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	f003 0320 	and.w	r3, r3, #32
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d03c      	beq.n	8000fce <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	699b      	ldr	r3, [r3, #24]
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d01c      	beq.n	8000f96 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8000f5c:	4b2d      	ldr	r3, [pc, #180]	@ (8001014 <HAL_RCC_OscConfig+0x4b8>)
 8000f5e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8000f62:	4a2c      	ldr	r2, [pc, #176]	@ (8001014 <HAL_RCC_OscConfig+0x4b8>)
 8000f64:	f043 0301 	orr.w	r3, r3, #1
 8000f68:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000f6c:	f7ff fac8 	bl	8000500 <HAL_GetTick>
 8000f70:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8000f72:	e008      	b.n	8000f86 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8000f74:	f7ff fac4 	bl	8000500 <HAL_GetTick>
 8000f78:	4602      	mov	r2, r0
 8000f7a:	693b      	ldr	r3, [r7, #16]
 8000f7c:	1ad3      	subs	r3, r2, r3
 8000f7e:	2b02      	cmp	r3, #2
 8000f80:	d901      	bls.n	8000f86 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8000f82:	2303      	movs	r3, #3
 8000f84:	e0f2      	b.n	800116c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8000f86:	4b23      	ldr	r3, [pc, #140]	@ (8001014 <HAL_RCC_OscConfig+0x4b8>)
 8000f88:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8000f8c:	f003 0302 	and.w	r3, r3, #2
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d0ef      	beq.n	8000f74 <HAL_RCC_OscConfig+0x418>
 8000f94:	e01b      	b.n	8000fce <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8000f96:	4b1f      	ldr	r3, [pc, #124]	@ (8001014 <HAL_RCC_OscConfig+0x4b8>)
 8000f98:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8000f9c:	4a1d      	ldr	r2, [pc, #116]	@ (8001014 <HAL_RCC_OscConfig+0x4b8>)
 8000f9e:	f023 0301 	bic.w	r3, r3, #1
 8000fa2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000fa6:	f7ff faab 	bl	8000500 <HAL_GetTick>
 8000faa:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8000fac:	e008      	b.n	8000fc0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8000fae:	f7ff faa7 	bl	8000500 <HAL_GetTick>
 8000fb2:	4602      	mov	r2, r0
 8000fb4:	693b      	ldr	r3, [r7, #16]
 8000fb6:	1ad3      	subs	r3, r2, r3
 8000fb8:	2b02      	cmp	r3, #2
 8000fba:	d901      	bls.n	8000fc0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8000fbc:	2303      	movs	r3, #3
 8000fbe:	e0d5      	b.n	800116c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8000fc0:	4b14      	ldr	r3, [pc, #80]	@ (8001014 <HAL_RCC_OscConfig+0x4b8>)
 8000fc2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8000fc6:	f003 0302 	and.w	r3, r3, #2
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d1ef      	bne.n	8000fae <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	69db      	ldr	r3, [r3, #28]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	f000 80c9 	beq.w	800116a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000fd8:	4b0e      	ldr	r3, [pc, #56]	@ (8001014 <HAL_RCC_OscConfig+0x4b8>)
 8000fda:	689b      	ldr	r3, [r3, #8]
 8000fdc:	f003 030c 	and.w	r3, r3, #12
 8000fe0:	2b0c      	cmp	r3, #12
 8000fe2:	f000 8083 	beq.w	80010ec <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	69db      	ldr	r3, [r3, #28]
 8000fea:	2b02      	cmp	r3, #2
 8000fec:	d15e      	bne.n	80010ac <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000fee:	4b09      	ldr	r3, [pc, #36]	@ (8001014 <HAL_RCC_OscConfig+0x4b8>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	4a08      	ldr	r2, [pc, #32]	@ (8001014 <HAL_RCC_OscConfig+0x4b8>)
 8000ff4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8000ff8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ffa:	f7ff fa81 	bl	8000500 <HAL_GetTick>
 8000ffe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001000:	e00c      	b.n	800101c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001002:	f7ff fa7d 	bl	8000500 <HAL_GetTick>
 8001006:	4602      	mov	r2, r0
 8001008:	693b      	ldr	r3, [r7, #16]
 800100a:	1ad3      	subs	r3, r2, r3
 800100c:	2b02      	cmp	r3, #2
 800100e:	d905      	bls.n	800101c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001010:	2303      	movs	r3, #3
 8001012:	e0ab      	b.n	800116c <HAL_RCC_OscConfig+0x610>
 8001014:	40021000 	.word	0x40021000
 8001018:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800101c:	4b55      	ldr	r3, [pc, #340]	@ (8001174 <HAL_RCC_OscConfig+0x618>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001024:	2b00      	cmp	r3, #0
 8001026:	d1ec      	bne.n	8001002 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001028:	4b52      	ldr	r3, [pc, #328]	@ (8001174 <HAL_RCC_OscConfig+0x618>)
 800102a:	68da      	ldr	r2, [r3, #12]
 800102c:	4b52      	ldr	r3, [pc, #328]	@ (8001178 <HAL_RCC_OscConfig+0x61c>)
 800102e:	4013      	ands	r3, r2
 8001030:	687a      	ldr	r2, [r7, #4]
 8001032:	6a11      	ldr	r1, [r2, #32]
 8001034:	687a      	ldr	r2, [r7, #4]
 8001036:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001038:	3a01      	subs	r2, #1
 800103a:	0112      	lsls	r2, r2, #4
 800103c:	4311      	orrs	r1, r2
 800103e:	687a      	ldr	r2, [r7, #4]
 8001040:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8001042:	0212      	lsls	r2, r2, #8
 8001044:	4311      	orrs	r1, r2
 8001046:	687a      	ldr	r2, [r7, #4]
 8001048:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800104a:	0852      	lsrs	r2, r2, #1
 800104c:	3a01      	subs	r2, #1
 800104e:	0552      	lsls	r2, r2, #21
 8001050:	4311      	orrs	r1, r2
 8001052:	687a      	ldr	r2, [r7, #4]
 8001054:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001056:	0852      	lsrs	r2, r2, #1
 8001058:	3a01      	subs	r2, #1
 800105a:	0652      	lsls	r2, r2, #25
 800105c:	4311      	orrs	r1, r2
 800105e:	687a      	ldr	r2, [r7, #4]
 8001060:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001062:	06d2      	lsls	r2, r2, #27
 8001064:	430a      	orrs	r2, r1
 8001066:	4943      	ldr	r1, [pc, #268]	@ (8001174 <HAL_RCC_OscConfig+0x618>)
 8001068:	4313      	orrs	r3, r2
 800106a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800106c:	4b41      	ldr	r3, [pc, #260]	@ (8001174 <HAL_RCC_OscConfig+0x618>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	4a40      	ldr	r2, [pc, #256]	@ (8001174 <HAL_RCC_OscConfig+0x618>)
 8001072:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001076:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001078:	4b3e      	ldr	r3, [pc, #248]	@ (8001174 <HAL_RCC_OscConfig+0x618>)
 800107a:	68db      	ldr	r3, [r3, #12]
 800107c:	4a3d      	ldr	r2, [pc, #244]	@ (8001174 <HAL_RCC_OscConfig+0x618>)
 800107e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001082:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001084:	f7ff fa3c 	bl	8000500 <HAL_GetTick>
 8001088:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800108a:	e008      	b.n	800109e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800108c:	f7ff fa38 	bl	8000500 <HAL_GetTick>
 8001090:	4602      	mov	r2, r0
 8001092:	693b      	ldr	r3, [r7, #16]
 8001094:	1ad3      	subs	r3, r2, r3
 8001096:	2b02      	cmp	r3, #2
 8001098:	d901      	bls.n	800109e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800109a:	2303      	movs	r3, #3
 800109c:	e066      	b.n	800116c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800109e:	4b35      	ldr	r3, [pc, #212]	@ (8001174 <HAL_RCC_OscConfig+0x618>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d0f0      	beq.n	800108c <HAL_RCC_OscConfig+0x530>
 80010aa:	e05e      	b.n	800116a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80010ac:	4b31      	ldr	r3, [pc, #196]	@ (8001174 <HAL_RCC_OscConfig+0x618>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4a30      	ldr	r2, [pc, #192]	@ (8001174 <HAL_RCC_OscConfig+0x618>)
 80010b2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80010b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010b8:	f7ff fa22 	bl	8000500 <HAL_GetTick>
 80010bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80010be:	e008      	b.n	80010d2 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80010c0:	f7ff fa1e 	bl	8000500 <HAL_GetTick>
 80010c4:	4602      	mov	r2, r0
 80010c6:	693b      	ldr	r3, [r7, #16]
 80010c8:	1ad3      	subs	r3, r2, r3
 80010ca:	2b02      	cmp	r3, #2
 80010cc:	d901      	bls.n	80010d2 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80010ce:	2303      	movs	r3, #3
 80010d0:	e04c      	b.n	800116c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80010d2:	4b28      	ldr	r3, [pc, #160]	@ (8001174 <HAL_RCC_OscConfig+0x618>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d1f0      	bne.n	80010c0 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80010de:	4b25      	ldr	r3, [pc, #148]	@ (8001174 <HAL_RCC_OscConfig+0x618>)
 80010e0:	68da      	ldr	r2, [r3, #12]
 80010e2:	4924      	ldr	r1, [pc, #144]	@ (8001174 <HAL_RCC_OscConfig+0x618>)
 80010e4:	4b25      	ldr	r3, [pc, #148]	@ (800117c <HAL_RCC_OscConfig+0x620>)
 80010e6:	4013      	ands	r3, r2
 80010e8:	60cb      	str	r3, [r1, #12]
 80010ea:	e03e      	b.n	800116a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	69db      	ldr	r3, [r3, #28]
 80010f0:	2b01      	cmp	r3, #1
 80010f2:	d101      	bne.n	80010f8 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80010f4:	2301      	movs	r3, #1
 80010f6:	e039      	b.n	800116c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80010f8:	4b1e      	ldr	r3, [pc, #120]	@ (8001174 <HAL_RCC_OscConfig+0x618>)
 80010fa:	68db      	ldr	r3, [r3, #12]
 80010fc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80010fe:	697b      	ldr	r3, [r7, #20]
 8001100:	f003 0203 	and.w	r2, r3, #3
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	6a1b      	ldr	r3, [r3, #32]
 8001108:	429a      	cmp	r2, r3
 800110a:	d12c      	bne.n	8001166 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800110c:	697b      	ldr	r3, [r7, #20]
 800110e:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001116:	3b01      	subs	r3, #1
 8001118:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800111a:	429a      	cmp	r2, r3
 800111c:	d123      	bne.n	8001166 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800111e:	697b      	ldr	r3, [r7, #20]
 8001120:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001128:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800112a:	429a      	cmp	r2, r3
 800112c:	d11b      	bne.n	8001166 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800112e:	697b      	ldr	r3, [r7, #20]
 8001130:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001138:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800113a:	429a      	cmp	r2, r3
 800113c:	d113      	bne.n	8001166 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800113e:	697b      	ldr	r3, [r7, #20]
 8001140:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001148:	085b      	lsrs	r3, r3, #1
 800114a:	3b01      	subs	r3, #1
 800114c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800114e:	429a      	cmp	r2, r3
 8001150:	d109      	bne.n	8001166 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001152:	697b      	ldr	r3, [r7, #20]
 8001154:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800115c:	085b      	lsrs	r3, r3, #1
 800115e:	3b01      	subs	r3, #1
 8001160:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001162:	429a      	cmp	r2, r3
 8001164:	d001      	beq.n	800116a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8001166:	2301      	movs	r3, #1
 8001168:	e000      	b.n	800116c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800116a:	2300      	movs	r3, #0
}
 800116c:	4618      	mov	r0, r3
 800116e:	3720      	adds	r7, #32
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}
 8001174:	40021000 	.word	0x40021000
 8001178:	019f800c 	.word	0x019f800c
 800117c:	feeefffc 	.word	0xfeeefffc

08001180 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b086      	sub	sp, #24
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
 8001188:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800118a:	2300      	movs	r3, #0
 800118c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	2b00      	cmp	r3, #0
 8001192:	d101      	bne.n	8001198 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001194:	2301      	movs	r3, #1
 8001196:	e11e      	b.n	80013d6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001198:	4b91      	ldr	r3, [pc, #580]	@ (80013e0 <HAL_RCC_ClockConfig+0x260>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	f003 030f 	and.w	r3, r3, #15
 80011a0:	683a      	ldr	r2, [r7, #0]
 80011a2:	429a      	cmp	r2, r3
 80011a4:	d910      	bls.n	80011c8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011a6:	4b8e      	ldr	r3, [pc, #568]	@ (80013e0 <HAL_RCC_ClockConfig+0x260>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f023 020f 	bic.w	r2, r3, #15
 80011ae:	498c      	ldr	r1, [pc, #560]	@ (80013e0 <HAL_RCC_ClockConfig+0x260>)
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	4313      	orrs	r3, r2
 80011b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80011b6:	4b8a      	ldr	r3, [pc, #552]	@ (80013e0 <HAL_RCC_ClockConfig+0x260>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f003 030f 	and.w	r3, r3, #15
 80011be:	683a      	ldr	r2, [r7, #0]
 80011c0:	429a      	cmp	r2, r3
 80011c2:	d001      	beq.n	80011c8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80011c4:	2301      	movs	r3, #1
 80011c6:	e106      	b.n	80013d6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f003 0301 	and.w	r3, r3, #1
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d073      	beq.n	80012bc <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	2b03      	cmp	r3, #3
 80011da:	d129      	bne.n	8001230 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80011dc:	4b81      	ldr	r3, [pc, #516]	@ (80013e4 <HAL_RCC_ClockConfig+0x264>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d101      	bne.n	80011ec <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80011e8:	2301      	movs	r3, #1
 80011ea:	e0f4      	b.n	80013d6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80011ec:	f000 f966 	bl	80014bc <RCC_GetSysClockFreqFromPLLSource>
 80011f0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80011f2:	693b      	ldr	r3, [r7, #16]
 80011f4:	4a7c      	ldr	r2, [pc, #496]	@ (80013e8 <HAL_RCC_ClockConfig+0x268>)
 80011f6:	4293      	cmp	r3, r2
 80011f8:	d93f      	bls.n	800127a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80011fa:	4b7a      	ldr	r3, [pc, #488]	@ (80013e4 <HAL_RCC_ClockConfig+0x264>)
 80011fc:	689b      	ldr	r3, [r3, #8]
 80011fe:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001202:	2b00      	cmp	r3, #0
 8001204:	d009      	beq.n	800121a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800120e:	2b00      	cmp	r3, #0
 8001210:	d033      	beq.n	800127a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001216:	2b00      	cmp	r3, #0
 8001218:	d12f      	bne.n	800127a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800121a:	4b72      	ldr	r3, [pc, #456]	@ (80013e4 <HAL_RCC_ClockConfig+0x264>)
 800121c:	689b      	ldr	r3, [r3, #8]
 800121e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001222:	4a70      	ldr	r2, [pc, #448]	@ (80013e4 <HAL_RCC_ClockConfig+0x264>)
 8001224:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001228:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800122a:	2380      	movs	r3, #128	@ 0x80
 800122c:	617b      	str	r3, [r7, #20]
 800122e:	e024      	b.n	800127a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	2b02      	cmp	r3, #2
 8001236:	d107      	bne.n	8001248 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001238:	4b6a      	ldr	r3, [pc, #424]	@ (80013e4 <HAL_RCC_ClockConfig+0x264>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001240:	2b00      	cmp	r3, #0
 8001242:	d109      	bne.n	8001258 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001244:	2301      	movs	r3, #1
 8001246:	e0c6      	b.n	80013d6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001248:	4b66      	ldr	r3, [pc, #408]	@ (80013e4 <HAL_RCC_ClockConfig+0x264>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001250:	2b00      	cmp	r3, #0
 8001252:	d101      	bne.n	8001258 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001254:	2301      	movs	r3, #1
 8001256:	e0be      	b.n	80013d6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001258:	f000 f8ce 	bl	80013f8 <HAL_RCC_GetSysClockFreq>
 800125c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800125e:	693b      	ldr	r3, [r7, #16]
 8001260:	4a61      	ldr	r2, [pc, #388]	@ (80013e8 <HAL_RCC_ClockConfig+0x268>)
 8001262:	4293      	cmp	r3, r2
 8001264:	d909      	bls.n	800127a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001266:	4b5f      	ldr	r3, [pc, #380]	@ (80013e4 <HAL_RCC_ClockConfig+0x264>)
 8001268:	689b      	ldr	r3, [r3, #8]
 800126a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800126e:	4a5d      	ldr	r2, [pc, #372]	@ (80013e4 <HAL_RCC_ClockConfig+0x264>)
 8001270:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001274:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001276:	2380      	movs	r3, #128	@ 0x80
 8001278:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800127a:	4b5a      	ldr	r3, [pc, #360]	@ (80013e4 <HAL_RCC_ClockConfig+0x264>)
 800127c:	689b      	ldr	r3, [r3, #8]
 800127e:	f023 0203 	bic.w	r2, r3, #3
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	4957      	ldr	r1, [pc, #348]	@ (80013e4 <HAL_RCC_ClockConfig+0x264>)
 8001288:	4313      	orrs	r3, r2
 800128a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800128c:	f7ff f938 	bl	8000500 <HAL_GetTick>
 8001290:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001292:	e00a      	b.n	80012aa <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001294:	f7ff f934 	bl	8000500 <HAL_GetTick>
 8001298:	4602      	mov	r2, r0
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	1ad3      	subs	r3, r2, r3
 800129e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80012a2:	4293      	cmp	r3, r2
 80012a4:	d901      	bls.n	80012aa <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80012a6:	2303      	movs	r3, #3
 80012a8:	e095      	b.n	80013d6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012aa:	4b4e      	ldr	r3, [pc, #312]	@ (80013e4 <HAL_RCC_ClockConfig+0x264>)
 80012ac:	689b      	ldr	r3, [r3, #8]
 80012ae:	f003 020c 	and.w	r2, r3, #12
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	009b      	lsls	r3, r3, #2
 80012b8:	429a      	cmp	r2, r3
 80012ba:	d1eb      	bne.n	8001294 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f003 0302 	and.w	r3, r3, #2
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d023      	beq.n	8001310 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	f003 0304 	and.w	r3, r3, #4
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d005      	beq.n	80012e0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80012d4:	4b43      	ldr	r3, [pc, #268]	@ (80013e4 <HAL_RCC_ClockConfig+0x264>)
 80012d6:	689b      	ldr	r3, [r3, #8]
 80012d8:	4a42      	ldr	r2, [pc, #264]	@ (80013e4 <HAL_RCC_ClockConfig+0x264>)
 80012da:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80012de:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	f003 0308 	and.w	r3, r3, #8
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d007      	beq.n	80012fc <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80012ec:	4b3d      	ldr	r3, [pc, #244]	@ (80013e4 <HAL_RCC_ClockConfig+0x264>)
 80012ee:	689b      	ldr	r3, [r3, #8]
 80012f0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80012f4:	4a3b      	ldr	r2, [pc, #236]	@ (80013e4 <HAL_RCC_ClockConfig+0x264>)
 80012f6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80012fa:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80012fc:	4b39      	ldr	r3, [pc, #228]	@ (80013e4 <HAL_RCC_ClockConfig+0x264>)
 80012fe:	689b      	ldr	r3, [r3, #8]
 8001300:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	689b      	ldr	r3, [r3, #8]
 8001308:	4936      	ldr	r1, [pc, #216]	@ (80013e4 <HAL_RCC_ClockConfig+0x264>)
 800130a:	4313      	orrs	r3, r2
 800130c:	608b      	str	r3, [r1, #8]
 800130e:	e008      	b.n	8001322 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001310:	697b      	ldr	r3, [r7, #20]
 8001312:	2b80      	cmp	r3, #128	@ 0x80
 8001314:	d105      	bne.n	8001322 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001316:	4b33      	ldr	r3, [pc, #204]	@ (80013e4 <HAL_RCC_ClockConfig+0x264>)
 8001318:	689b      	ldr	r3, [r3, #8]
 800131a:	4a32      	ldr	r2, [pc, #200]	@ (80013e4 <HAL_RCC_ClockConfig+0x264>)
 800131c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001320:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001322:	4b2f      	ldr	r3, [pc, #188]	@ (80013e0 <HAL_RCC_ClockConfig+0x260>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f003 030f 	and.w	r3, r3, #15
 800132a:	683a      	ldr	r2, [r7, #0]
 800132c:	429a      	cmp	r2, r3
 800132e:	d21d      	bcs.n	800136c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001330:	4b2b      	ldr	r3, [pc, #172]	@ (80013e0 <HAL_RCC_ClockConfig+0x260>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f023 020f 	bic.w	r2, r3, #15
 8001338:	4929      	ldr	r1, [pc, #164]	@ (80013e0 <HAL_RCC_ClockConfig+0x260>)
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	4313      	orrs	r3, r2
 800133e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001340:	f7ff f8de 	bl	8000500 <HAL_GetTick>
 8001344:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001346:	e00a      	b.n	800135e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001348:	f7ff f8da 	bl	8000500 <HAL_GetTick>
 800134c:	4602      	mov	r2, r0
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	1ad3      	subs	r3, r2, r3
 8001352:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001356:	4293      	cmp	r3, r2
 8001358:	d901      	bls.n	800135e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800135a:	2303      	movs	r3, #3
 800135c:	e03b      	b.n	80013d6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800135e:	4b20      	ldr	r3, [pc, #128]	@ (80013e0 <HAL_RCC_ClockConfig+0x260>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f003 030f 	and.w	r3, r3, #15
 8001366:	683a      	ldr	r2, [r7, #0]
 8001368:	429a      	cmp	r2, r3
 800136a:	d1ed      	bne.n	8001348 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f003 0304 	and.w	r3, r3, #4
 8001374:	2b00      	cmp	r3, #0
 8001376:	d008      	beq.n	800138a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001378:	4b1a      	ldr	r3, [pc, #104]	@ (80013e4 <HAL_RCC_ClockConfig+0x264>)
 800137a:	689b      	ldr	r3, [r3, #8]
 800137c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	68db      	ldr	r3, [r3, #12]
 8001384:	4917      	ldr	r1, [pc, #92]	@ (80013e4 <HAL_RCC_ClockConfig+0x264>)
 8001386:	4313      	orrs	r3, r2
 8001388:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f003 0308 	and.w	r3, r3, #8
 8001392:	2b00      	cmp	r3, #0
 8001394:	d009      	beq.n	80013aa <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001396:	4b13      	ldr	r3, [pc, #76]	@ (80013e4 <HAL_RCC_ClockConfig+0x264>)
 8001398:	689b      	ldr	r3, [r3, #8]
 800139a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	691b      	ldr	r3, [r3, #16]
 80013a2:	00db      	lsls	r3, r3, #3
 80013a4:	490f      	ldr	r1, [pc, #60]	@ (80013e4 <HAL_RCC_ClockConfig+0x264>)
 80013a6:	4313      	orrs	r3, r2
 80013a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80013aa:	f000 f825 	bl	80013f8 <HAL_RCC_GetSysClockFreq>
 80013ae:	4602      	mov	r2, r0
 80013b0:	4b0c      	ldr	r3, [pc, #48]	@ (80013e4 <HAL_RCC_ClockConfig+0x264>)
 80013b2:	689b      	ldr	r3, [r3, #8]
 80013b4:	091b      	lsrs	r3, r3, #4
 80013b6:	f003 030f 	and.w	r3, r3, #15
 80013ba:	490c      	ldr	r1, [pc, #48]	@ (80013ec <HAL_RCC_ClockConfig+0x26c>)
 80013bc:	5ccb      	ldrb	r3, [r1, r3]
 80013be:	f003 031f 	and.w	r3, r3, #31
 80013c2:	fa22 f303 	lsr.w	r3, r2, r3
 80013c6:	4a0a      	ldr	r2, [pc, #40]	@ (80013f0 <HAL_RCC_ClockConfig+0x270>)
 80013c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80013ca:	4b0a      	ldr	r3, [pc, #40]	@ (80013f4 <HAL_RCC_ClockConfig+0x274>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	4618      	mov	r0, r3
 80013d0:	f7ff f84a 	bl	8000468 <HAL_InitTick>
 80013d4:	4603      	mov	r3, r0
}
 80013d6:	4618      	mov	r0, r3
 80013d8:	3718      	adds	r7, #24
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	40022000 	.word	0x40022000
 80013e4:	40021000 	.word	0x40021000
 80013e8:	04c4b400 	.word	0x04c4b400
 80013ec:	080015b8 	.word	0x080015b8
 80013f0:	20000000 	.word	0x20000000
 80013f4:	20000004 	.word	0x20000004

080013f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80013f8:	b480      	push	{r7}
 80013fa:	b087      	sub	sp, #28
 80013fc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80013fe:	4b2c      	ldr	r3, [pc, #176]	@ (80014b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001400:	689b      	ldr	r3, [r3, #8]
 8001402:	f003 030c 	and.w	r3, r3, #12
 8001406:	2b04      	cmp	r3, #4
 8001408:	d102      	bne.n	8001410 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800140a:	4b2a      	ldr	r3, [pc, #168]	@ (80014b4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800140c:	613b      	str	r3, [r7, #16]
 800140e:	e047      	b.n	80014a0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001410:	4b27      	ldr	r3, [pc, #156]	@ (80014b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001412:	689b      	ldr	r3, [r3, #8]
 8001414:	f003 030c 	and.w	r3, r3, #12
 8001418:	2b08      	cmp	r3, #8
 800141a:	d102      	bne.n	8001422 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800141c:	4b26      	ldr	r3, [pc, #152]	@ (80014b8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800141e:	613b      	str	r3, [r7, #16]
 8001420:	e03e      	b.n	80014a0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001422:	4b23      	ldr	r3, [pc, #140]	@ (80014b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001424:	689b      	ldr	r3, [r3, #8]
 8001426:	f003 030c 	and.w	r3, r3, #12
 800142a:	2b0c      	cmp	r3, #12
 800142c:	d136      	bne.n	800149c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800142e:	4b20      	ldr	r3, [pc, #128]	@ (80014b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001430:	68db      	ldr	r3, [r3, #12]
 8001432:	f003 0303 	and.w	r3, r3, #3
 8001436:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001438:	4b1d      	ldr	r3, [pc, #116]	@ (80014b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800143a:	68db      	ldr	r3, [r3, #12]
 800143c:	091b      	lsrs	r3, r3, #4
 800143e:	f003 030f 	and.w	r3, r3, #15
 8001442:	3301      	adds	r3, #1
 8001444:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	2b03      	cmp	r3, #3
 800144a:	d10c      	bne.n	8001466 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800144c:	4a1a      	ldr	r2, [pc, #104]	@ (80014b8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800144e:	68bb      	ldr	r3, [r7, #8]
 8001450:	fbb2 f3f3 	udiv	r3, r2, r3
 8001454:	4a16      	ldr	r2, [pc, #88]	@ (80014b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001456:	68d2      	ldr	r2, [r2, #12]
 8001458:	0a12      	lsrs	r2, r2, #8
 800145a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800145e:	fb02 f303 	mul.w	r3, r2, r3
 8001462:	617b      	str	r3, [r7, #20]
      break;
 8001464:	e00c      	b.n	8001480 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001466:	4a13      	ldr	r2, [pc, #76]	@ (80014b4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001468:	68bb      	ldr	r3, [r7, #8]
 800146a:	fbb2 f3f3 	udiv	r3, r2, r3
 800146e:	4a10      	ldr	r2, [pc, #64]	@ (80014b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001470:	68d2      	ldr	r2, [r2, #12]
 8001472:	0a12      	lsrs	r2, r2, #8
 8001474:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001478:	fb02 f303 	mul.w	r3, r2, r3
 800147c:	617b      	str	r3, [r7, #20]
      break;
 800147e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001480:	4b0b      	ldr	r3, [pc, #44]	@ (80014b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001482:	68db      	ldr	r3, [r3, #12]
 8001484:	0e5b      	lsrs	r3, r3, #25
 8001486:	f003 0303 	and.w	r3, r3, #3
 800148a:	3301      	adds	r3, #1
 800148c:	005b      	lsls	r3, r3, #1
 800148e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8001490:	697a      	ldr	r2, [r7, #20]
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	fbb2 f3f3 	udiv	r3, r2, r3
 8001498:	613b      	str	r3, [r7, #16]
 800149a:	e001      	b.n	80014a0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800149c:	2300      	movs	r3, #0
 800149e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80014a0:	693b      	ldr	r3, [r7, #16]
}
 80014a2:	4618      	mov	r0, r3
 80014a4:	371c      	adds	r7, #28
 80014a6:	46bd      	mov	sp, r7
 80014a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ac:	4770      	bx	lr
 80014ae:	bf00      	nop
 80014b0:	40021000 	.word	0x40021000
 80014b4:	00f42400 	.word	0x00f42400
 80014b8:	007a1200 	.word	0x007a1200

080014bc <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80014bc:	b480      	push	{r7}
 80014be:	b087      	sub	sp, #28
 80014c0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80014c2:	4b1e      	ldr	r3, [pc, #120]	@ (800153c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80014c4:	68db      	ldr	r3, [r3, #12]
 80014c6:	f003 0303 	and.w	r3, r3, #3
 80014ca:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80014cc:	4b1b      	ldr	r3, [pc, #108]	@ (800153c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80014ce:	68db      	ldr	r3, [r3, #12]
 80014d0:	091b      	lsrs	r3, r3, #4
 80014d2:	f003 030f 	and.w	r3, r3, #15
 80014d6:	3301      	adds	r3, #1
 80014d8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80014da:	693b      	ldr	r3, [r7, #16]
 80014dc:	2b03      	cmp	r3, #3
 80014de:	d10c      	bne.n	80014fa <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80014e0:	4a17      	ldr	r2, [pc, #92]	@ (8001540 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80014e8:	4a14      	ldr	r2, [pc, #80]	@ (800153c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80014ea:	68d2      	ldr	r2, [r2, #12]
 80014ec:	0a12      	lsrs	r2, r2, #8
 80014ee:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80014f2:	fb02 f303 	mul.w	r3, r2, r3
 80014f6:	617b      	str	r3, [r7, #20]
    break;
 80014f8:	e00c      	b.n	8001514 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80014fa:	4a12      	ldr	r2, [pc, #72]	@ (8001544 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001502:	4a0e      	ldr	r2, [pc, #56]	@ (800153c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001504:	68d2      	ldr	r2, [r2, #12]
 8001506:	0a12      	lsrs	r2, r2, #8
 8001508:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800150c:	fb02 f303 	mul.w	r3, r2, r3
 8001510:	617b      	str	r3, [r7, #20]
    break;
 8001512:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001514:	4b09      	ldr	r3, [pc, #36]	@ (800153c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001516:	68db      	ldr	r3, [r3, #12]
 8001518:	0e5b      	lsrs	r3, r3, #25
 800151a:	f003 0303 	and.w	r3, r3, #3
 800151e:	3301      	adds	r3, #1
 8001520:	005b      	lsls	r3, r3, #1
 8001522:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8001524:	697a      	ldr	r2, [r7, #20]
 8001526:	68bb      	ldr	r3, [r7, #8]
 8001528:	fbb2 f3f3 	udiv	r3, r2, r3
 800152c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800152e:	687b      	ldr	r3, [r7, #4]
}
 8001530:	4618      	mov	r0, r3
 8001532:	371c      	adds	r7, #28
 8001534:	46bd      	mov	sp, r7
 8001536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153a:	4770      	bx	lr
 800153c:	40021000 	.word	0x40021000
 8001540:	007a1200 	.word	0x007a1200
 8001544:	00f42400 	.word	0x00f42400

08001548 <memset>:
 8001548:	4402      	add	r2, r0
 800154a:	4603      	mov	r3, r0
 800154c:	4293      	cmp	r3, r2
 800154e:	d100      	bne.n	8001552 <memset+0xa>
 8001550:	4770      	bx	lr
 8001552:	f803 1b01 	strb.w	r1, [r3], #1
 8001556:	e7f9      	b.n	800154c <memset+0x4>

08001558 <__libc_init_array>:
 8001558:	b570      	push	{r4, r5, r6, lr}
 800155a:	4d0d      	ldr	r5, [pc, #52]	@ (8001590 <__libc_init_array+0x38>)
 800155c:	4c0d      	ldr	r4, [pc, #52]	@ (8001594 <__libc_init_array+0x3c>)
 800155e:	1b64      	subs	r4, r4, r5
 8001560:	10a4      	asrs	r4, r4, #2
 8001562:	2600      	movs	r6, #0
 8001564:	42a6      	cmp	r6, r4
 8001566:	d109      	bne.n	800157c <__libc_init_array+0x24>
 8001568:	4d0b      	ldr	r5, [pc, #44]	@ (8001598 <__libc_init_array+0x40>)
 800156a:	4c0c      	ldr	r4, [pc, #48]	@ (800159c <__libc_init_array+0x44>)
 800156c:	f000 f818 	bl	80015a0 <_init>
 8001570:	1b64      	subs	r4, r4, r5
 8001572:	10a4      	asrs	r4, r4, #2
 8001574:	2600      	movs	r6, #0
 8001576:	42a6      	cmp	r6, r4
 8001578:	d105      	bne.n	8001586 <__libc_init_array+0x2e>
 800157a:	bd70      	pop	{r4, r5, r6, pc}
 800157c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001580:	4798      	blx	r3
 8001582:	3601      	adds	r6, #1
 8001584:	e7ee      	b.n	8001564 <__libc_init_array+0xc>
 8001586:	f855 3b04 	ldr.w	r3, [r5], #4
 800158a:	4798      	blx	r3
 800158c:	3601      	adds	r6, #1
 800158e:	e7f2      	b.n	8001576 <__libc_init_array+0x1e>
 8001590:	080015c8 	.word	0x080015c8
 8001594:	080015c8 	.word	0x080015c8
 8001598:	080015c8 	.word	0x080015c8
 800159c:	080015cc 	.word	0x080015cc

080015a0 <_init>:
 80015a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80015a2:	bf00      	nop
 80015a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80015a6:	bc08      	pop	{r3}
 80015a8:	469e      	mov	lr, r3
 80015aa:	4770      	bx	lr

080015ac <_fini>:
 80015ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80015ae:	bf00      	nop
 80015b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80015b2:	bc08      	pop	{r3}
 80015b4:	469e      	mov	lr, r3
 80015b6:	4770      	bx	lr
